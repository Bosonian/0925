{"version":3,"file":"command-C8f3Bfre.js","sources":["../../src/patterns/command.js"],"sourcesContent":["/**\n * Command Pattern for Medical Actions and Audit Trail\n * iGFAP Stroke Triage Assistant - Enterprise Architecture\n *\n * Provides reversible medical actions with comprehensive audit logging\n */\n\nimport { medicalEventObserver, MEDICAL_EVENTS } from \"./observer.js\";\n\n/**\n * Abstract base command for medical actions\n */\nclass MedicalCommand {\n  constructor(name, description, metadata = {}) {\n    this.name = name;\n    this.description = description;\n    this.metadata = {\n      ...metadata,\n      id: `cmd_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date().toISOString(),\n    };\n    this.executed = false;\n    this.undone = false;\n  }\n\n  /**\n   * Execute the medical command\n   * @returns {Promise<any>} Command execution result\n   */\n  async execute() {\n    if (this.executed && !this.undone) {\n      throw new Error(`Command ${this.name} has already been executed`);\n    }\n\n    try {\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: \"command_execute_start\",\n        command: this.name,\n        commandId: this.metadata.id,\n      });\n\n      const result = await this.doExecute();\n\n      this.executed = true;\n      this.undone = false;\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: \"command_execute_success\",\n        command: this.name,\n        commandId: this.metadata.id,\n      });\n\n      return result;\n    } catch (error) {\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: \"command_execute_error\",\n        command: this.name,\n        commandId: this.metadata.id,\n        error: error.message,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Undo the medical command\n   * @returns {Promise<any>} Command undo result\n   */\n  async undo() {\n    if (!this.executed || this.undone) {\n      throw new Error(`Command ${this.name} cannot be undone`);\n    }\n\n    try {\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: \"command_undo_start\",\n        command: this.name,\n        commandId: this.metadata.id,\n      });\n\n      const result = await this.doUndo();\n\n      this.undone = true;\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: \"command_undo_success\",\n        command: this.name,\n        commandId: this.metadata.id,\n      });\n\n      return result;\n    } catch (error) {\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: \"command_undo_error\",\n        command: this.name,\n        commandId: this.metadata.id,\n        error: error.message,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Implement the actual command execution\n   * Must be overridden by concrete commands\n   */\n  async doExecute() {\n    throw new Error(\"doExecute() must be implemented by concrete command\");\n  }\n\n  /**\n   * Implement the actual command undo\n   * Must be overridden by concrete commands\n   */\n  async doUndo() {\n    throw new Error(\"doUndo() must be implemented by concrete command\");\n  }\n\n  /**\n   * Check if command can be undone\n   */\n  canUndo() {\n    return this.executed && !this.undone;\n  }\n\n  /**\n   * Get command summary for audit\n   */\n  getSummary() {\n    return {\n      name: this.name,\n      description: this.description,\n      id: this.metadata.id,\n      timestamp: this.metadata.timestamp,\n      executed: this.executed,\n      undone: this.undone,\n    };\n  }\n}\n\n/**\n * Command for updating patient data\n */\nclass UpdatePatientDataCommand extends MedicalCommand {\n  constructor(fieldName, newValue, previousValue, store) {\n    super(\n      \"UPDATE_PATIENT_DATA\",\n      `Update ${fieldName} from ${previousValue} to ${newValue}`,\n      { fieldName, newValue, previousValue },\n    );\n    this.fieldName = fieldName;\n    this.newValue = newValue;\n    this.previousValue = previousValue;\n    this.store = store;\n  }\n\n  async doExecute() {\n    // Update the patient data in store\n    const currentData = this.store.getFormData(\"current\") || {};\n    currentData[this.fieldName] = this.newValue;\n    this.store.setFormData(\"current\", currentData);\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.PATIENT_DATA_UPDATED, {\n      field: this.fieldName,\n      newValue: this.newValue,\n      previousValue: this.previousValue,\n    });\n\n    return { field: this.fieldName, value: this.newValue };\n  }\n\n  async doUndo() {\n    // Restore the previous value\n    const currentData = this.store.getFormData(\"current\") || {};\n    if (this.previousValue === null || this.previousValue === undefined) {\n      delete currentData[this.fieldName];\n    } else {\n      currentData[this.fieldName] = this.previousValue;\n    }\n    this.store.setFormData(\"current\", currentData);\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.PATIENT_DATA_UPDATED, {\n      field: this.fieldName,\n      newValue: this.previousValue,\n      previousValue: this.newValue,\n      action: \"undo\",\n    });\n\n    return { field: this.fieldName, value: this.previousValue };\n  }\n}\n\n/**\n * Command for navigating between screens\n */\nclass NavigationCommand extends MedicalCommand {\n  constructor(targetScreen, sourceScreen, store) {\n    super(\n      \"NAVIGATE\",\n      `Navigate from ${sourceScreen} to ${targetScreen}`,\n      { targetScreen, sourceScreen },\n    );\n    this.targetScreen = targetScreen;\n    this.sourceScreen = sourceScreen;\n    this.store = store;\n  }\n\n  async doExecute() {\n    this.store.navigate(this.targetScreen);\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.NAVIGATION_CHANGED, {\n      from: this.sourceScreen,\n      to: this.targetScreen,\n    });\n\n    return { from: this.sourceScreen, to: this.targetScreen };\n  }\n\n  async doUndo() {\n    this.store.navigate(this.sourceScreen);\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.NAVIGATION_CHANGED, {\n      from: this.targetScreen,\n      to: this.sourceScreen,\n      action: \"undo\",\n    });\n\n    return { from: this.targetScreen, to: this.sourceScreen };\n  }\n}\n\n/**\n * Command for form submission\n */\nclass SubmitFormCommand extends MedicalCommand {\n  constructor(formData, moduleType, predictionStrategy) {\n    super(\n      \"SUBMIT_FORM\",\n      `Submit ${moduleType} form for prediction`,\n      { moduleType, formFields: Object.keys(formData) },\n    );\n    this.formData = { ...formData };\n    this.moduleType = moduleType;\n    this.predictionStrategy = predictionStrategy;\n    this.results = null;\n  }\n\n  async doExecute() {\n    // Set the prediction strategy\n    this.predictionStrategy.setStrategy(this.getStrategyName());\n\n    // Execute prediction\n    this.results = await this.predictionStrategy.predict(this.formData);\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.FORM_SUBMITTED, {\n      moduleType: this.moduleType,\n      fieldsCount: Object.keys(this.formData).length,\n      success: true,\n    });\n\n    return this.results;\n  }\n\n  async doUndo() {\n    // Clear the results (cannot truly undo API call, but can clear local state)\n    this.results = null;\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.FORM_SUBMITTED, {\n      moduleType: this.moduleType,\n      action: \"undo\",\n    });\n\n    return null;\n  }\n\n  getStrategyName() {\n    switch (this.moduleType) {\n    case \"coma\":\n      return \"COMA_ICH\";\n    case \"limited\":\n      return \"LIMITED_DATA_ICH\";\n    case \"full\":\n      return \"FULL_STROKE\";\n    default:\n      throw new Error(`Unknown module type: ${this.moduleType}`);\n    }\n  }\n}\n\n/**\n * Command for clearing sensitive data\n */\nclass ClearDataCommand extends MedicalCommand {\n  constructor(dataType, store) {\n    super(\n      \"CLEAR_DATA\",\n      `Clear ${dataType} data for privacy compliance`,\n      { dataType },\n    );\n    this.dataType = dataType;\n    this.store = store;\n    this.backupData = null;\n  }\n\n  async doExecute() {\n    // Backup data before clearing\n    this.backupData = this.store.getState();\n\n    // Clear the specified data\n    switch (this.dataType) {\n    case \"all\":\n      this.store.reset();\n      break;\n    case \"forms\":\n      this.store.clearFormData();\n      break;\n    case \"results\":\n      this.store.clearResults();\n      break;\n    default:\n      throw new Error(`Unknown data type: ${this.dataType}`);\n    }\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: \"data_cleared\",\n      dataType: this.dataType,\n    });\n\n    return { dataType: this.dataType, cleared: true };\n  }\n\n  async doUndo() {\n    // Restore from backup (if within reasonable time limit)\n    if (this.backupData) {\n      this.store.setState(this.backupData);\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: \"data_restored\",\n        dataType: this.dataType,\n      });\n\n      return { dataType: this.dataType, restored: true };\n    }\n\n    throw new Error(\"Cannot undo data clear: backup not available\");\n  }\n}\n\n/**\n * Command invoker for managing medical command execution\n */\nexport class MedicalCommandInvoker {\n  constructor() {\n    this.commandHistory = [];\n    this.currentIndex = -1;\n    this.maxHistorySize = 100;\n  }\n\n  /**\n   * Execute a medical command\n   * @param {MedicalCommand} command - Command to execute\n   * @returns {Promise<any>} Command result\n   */\n  async executeCommand(command) {\n    if (!(command instanceof MedicalCommand)) {\n      throw new Error(\"Command must extend MedicalCommand\");\n    }\n\n    const result = await command.execute();\n\n    // Add to history (remove any commands after current index)\n    this.commandHistory = this.commandHistory.slice(0, this.currentIndex + 1);\n    this.commandHistory.push(command);\n    this.currentIndex = this.commandHistory.length - 1;\n\n    // Limit history size\n    if (this.commandHistory.length > this.maxHistorySize) {\n      this.commandHistory.shift();\n      this.currentIndex -= 1;\n    }\n\n    return result;\n  }\n\n  /**\n   * Undo the last command\n   * @returns {Promise<any>} Undo result\n   */\n  async undo() {\n    if (this.currentIndex < 0) {\n      throw new Error(\"No commands to undo\");\n    }\n\n    const command = this.commandHistory[this.currentIndex];\n    if (!command.canUndo()) {\n      throw new Error(`Command ${command.name} cannot be undone`);\n    }\n\n    const result = await command.undo();\n    this.currentIndex -= 1;\n\n    return result;\n  }\n\n  /**\n   * Redo the next command\n   * @returns {Promise<any>} Redo result\n   */\n  async redo() {\n    if (this.currentIndex >= this.commandHistory.length - 1) {\n      throw new Error(\"No commands to redo\");\n    }\n\n    this.currentIndex += 1;\n    const command = this.commandHistory[this.currentIndex];\n\n    return await command.execute();\n  }\n\n  /**\n   * Check if undo is possible\n   */\n  canUndo() {\n    return this.currentIndex >= 0\n           && this.commandHistory[this.currentIndex]\n           && this.commandHistory[this.currentIndex].canUndo();\n  }\n\n  /**\n   * Check if redo is possible\n   */\n  canRedo() {\n    return this.currentIndex < this.commandHistory.length - 1;\n  }\n\n  /**\n   * Get command history for audit\n   */\n  getCommandHistory() {\n    return this.commandHistory.map((cmd) => cmd.getSummary());\n  }\n\n  /**\n   * Clear command history (privacy compliance)\n   */\n  clearHistory() {\n    this.commandHistory = [];\n    this.currentIndex = -1;\n  }\n\n  /**\n   * Get current command statistics\n   */\n  getStats() {\n    return {\n      totalCommands: this.commandHistory.length,\n      currentIndex: this.currentIndex,\n      canUndo: this.canUndo(),\n      canRedo: this.canRedo(),\n      executedCommands: this.currentIndex + 1,\n    };\n  }\n}\n\n// Export command classes and singleton invoker\nexport {\n  MedicalCommand,\n  UpdatePatientDataCommand,\n  NavigationCommand,\n  SubmitFormCommand,\n  ClearDataCommand,\n};\n\nexport const medicalCommandInvoker = new MedicalCommandInvoker();\n"],"names":["MedicalCommand","name","description","metadata","medicalEventObserver","MEDICAL_EVENTS","result","error","UpdatePatientDataCommand","fieldName","newValue","previousValue","store","currentData","NavigationCommand","targetScreen","sourceScreen","SubmitFormCommand","formData","moduleType","predictionStrategy","ClearDataCommand","dataType","MedicalCommandInvoker","command","cmd","medicalCommandInvoker"],"mappings":"+CAYA,MAAMA,CAAe,CACnB,YAAYC,EAAMC,EAAaC,EAAW,CAAA,EAAI,CAC5C,KAAK,KAAOF,EACZ,KAAK,YAAcC,EACnB,KAAK,SAAW,CACd,GAAGC,EACH,GAAI,OAAO,KAAK,IAAG,CAAE,IAAI,KAAK,OAAM,EAAG,SAAS,EAAE,EAAE,OAAO,EAAG,CAAC,CAAC,GAChE,UAAW,IAAI,KAAI,EAAG,YAAW,CACvC,EACI,KAAK,SAAW,GAChB,KAAK,OAAS,EAChB,CAMA,MAAM,SAAU,CACd,GAAI,KAAK,UAAY,CAAC,KAAK,OACzB,MAAM,IAAI,MAAM,WAAW,KAAK,IAAI,4BAA4B,EAGlE,GAAI,CACFC,EAAqB,QAAQC,EAAe,YAAa,CACvD,OAAQ,wBACR,QAAS,KAAK,KACd,UAAW,KAAK,SAAS,EACjC,CAAO,EAED,MAAMC,EAAS,MAAM,KAAK,UAAS,EAEnC,YAAK,SAAW,GAChB,KAAK,OAAS,GAEdF,EAAqB,QAAQC,EAAe,YAAa,CACvD,OAAQ,0BACR,QAAS,KAAK,KACd,UAAW,KAAK,SAAS,EACjC,CAAO,EAEMC,CACT,OAASC,EAAO,CACd,MAAAH,EAAqB,QAAQC,EAAe,YAAa,CACvD,OAAQ,wBACR,QAAS,KAAK,KACd,UAAW,KAAK,SAAS,GACzB,MAAOE,EAAM,OACrB,CAAO,EACKA,CACR,CACF,CAMA,MAAM,MAAO,CACX,GAAI,CAAC,KAAK,UAAY,KAAK,OACzB,MAAM,IAAI,MAAM,WAAW,KAAK,IAAI,mBAAmB,EAGzD,GAAI,CACFH,EAAqB,QAAQC,EAAe,YAAa,CACvD,OAAQ,qBACR,QAAS,KAAK,KACd,UAAW,KAAK,SAAS,EACjC,CAAO,EAED,MAAMC,EAAS,MAAM,KAAK,OAAM,EAEhC,YAAK,OAAS,GAEdF,EAAqB,QAAQC,EAAe,YAAa,CACvD,OAAQ,uBACR,QAAS,KAAK,KACd,UAAW,KAAK,SAAS,EACjC,CAAO,EAEMC,CACT,OAASC,EAAO,CACd,MAAAH,EAAqB,QAAQC,EAAe,YAAa,CACvD,OAAQ,qBACR,QAAS,KAAK,KACd,UAAW,KAAK,SAAS,GACzB,MAAOE,EAAM,OACrB,CAAO,EACKA,CACR,CACF,CAMA,MAAM,WAAY,CAChB,MAAM,IAAI,MAAM,qDAAqD,CACvE,CAMA,MAAM,QAAS,CACb,MAAM,IAAI,MAAM,kDAAkD,CACpE,CAKA,SAAU,CACR,OAAO,KAAK,UAAY,CAAC,KAAK,MAChC,CAKA,YAAa,CACX,MAAO,CACL,KAAM,KAAK,KACX,YAAa,KAAK,YAClB,GAAI,KAAK,SAAS,GAClB,UAAW,KAAK,SAAS,UACzB,SAAU,KAAK,SACf,OAAQ,KAAK,MACnB,CACE,CACF,CAKA,MAAMC,UAAiCR,CAAe,CACpD,YAAYS,EAAWC,EAAUC,EAAeC,EAAO,CACrD,MACE,sBACA,UAAUH,CAAS,SAASE,CAAa,OAAOD,CAAQ,GACxD,CAAE,UAAAD,EAAW,SAAAC,EAAU,cAAAC,CAAa,CAC1C,EACI,KAAK,UAAYF,EACjB,KAAK,SAAWC,EAChB,KAAK,cAAgBC,EACrB,KAAK,MAAQC,CACf,CAEA,MAAM,WAAY,CAEhB,MAAMC,EAAc,KAAK,MAAM,YAAY,SAAS,GAAK,CAAA,EACzD,OAAAA,EAAY,KAAK,SAAS,EAAI,KAAK,SACnC,KAAK,MAAM,YAAY,UAAWA,CAAW,EAE7CT,EAAqB,QAAQC,EAAe,qBAAsB,CAChE,MAAO,KAAK,UACZ,SAAU,KAAK,SACf,cAAe,KAAK,aAC1B,CAAK,EAEM,CAAE,MAAO,KAAK,UAAW,MAAO,KAAK,QAAQ,CACtD,CAEA,MAAM,QAAS,CAEb,MAAMQ,EAAc,KAAK,MAAM,YAAY,SAAS,GAAK,CAAA,EACzD,OAAI,KAAK,gBAAkB,MAAQ,KAAK,gBAAkB,OACxD,OAAOA,EAAY,KAAK,SAAS,EAEjCA,EAAY,KAAK,SAAS,EAAI,KAAK,cAErC,KAAK,MAAM,YAAY,UAAWA,CAAW,EAE7CT,EAAqB,QAAQC,EAAe,qBAAsB,CAChE,MAAO,KAAK,UACZ,SAAU,KAAK,cACf,cAAe,KAAK,SACpB,OAAQ,MACd,CAAK,EAEM,CAAE,MAAO,KAAK,UAAW,MAAO,KAAK,aAAa,CAC3D,CACF,CAKA,MAAMS,UAA0Bd,CAAe,CAC7C,YAAYe,EAAcC,EAAcJ,EAAO,CAC7C,MACE,WACA,iBAAiBI,CAAY,OAAOD,CAAY,GAChD,CAAE,aAAAA,EAAc,aAAAC,CAAY,CAClC,EACI,KAAK,aAAeD,EACpB,KAAK,aAAeC,EACpB,KAAK,MAAQJ,CACf,CAEA,MAAM,WAAY,CAChB,YAAK,MAAM,SAAS,KAAK,YAAY,EAErCR,EAAqB,QAAQC,EAAe,mBAAoB,CAC9D,KAAM,KAAK,aACX,GAAI,KAAK,YACf,CAAK,EAEM,CAAE,KAAM,KAAK,aAAc,GAAI,KAAK,YAAY,CACzD,CAEA,MAAM,QAAS,CACb,YAAK,MAAM,SAAS,KAAK,YAAY,EAErCD,EAAqB,QAAQC,EAAe,mBAAoB,CAC9D,KAAM,KAAK,aACX,GAAI,KAAK,aACT,OAAQ,MACd,CAAK,EAEM,CAAE,KAAM,KAAK,aAAc,GAAI,KAAK,YAAY,CACzD,CACF,CAKA,MAAMY,UAA0BjB,CAAe,CAC7C,YAAYkB,EAAUC,EAAYC,EAAoB,CACpD,MACE,cACA,UAAUD,CAAU,uBACpB,CAAE,WAAAA,EAAY,WAAY,OAAO,KAAKD,CAAQ,CAAC,CACrD,EACI,KAAK,SAAW,CAAE,GAAGA,CAAQ,EAC7B,KAAK,WAAaC,EAClB,KAAK,mBAAqBC,EAC1B,KAAK,QAAU,IACjB,CAEA,MAAM,WAAY,CAEhB,YAAK,mBAAmB,YAAY,KAAK,gBAAe,CAAE,EAG1D,KAAK,QAAU,MAAM,KAAK,mBAAmB,QAAQ,KAAK,QAAQ,EAElEhB,EAAqB,QAAQC,EAAe,eAAgB,CAC1D,WAAY,KAAK,WACjB,YAAa,OAAO,KAAK,KAAK,QAAQ,EAAE,OACxC,QAAS,EACf,CAAK,EAEM,KAAK,OACd,CAEA,MAAM,QAAS,CAEb,YAAK,QAAU,KAEfD,EAAqB,QAAQC,EAAe,eAAgB,CAC1D,WAAY,KAAK,WACjB,OAAQ,MACd,CAAK,EAEM,IACT,CAEA,iBAAkB,CAChB,OAAQ,KAAK,WAAU,CACvB,IAAK,OACH,MAAO,WACT,IAAK,UACH,MAAO,mBACT,IAAK,OACH,MAAO,cACT,QACE,MAAM,IAAI,MAAM,wBAAwB,KAAK,UAAU,EAAE,CAC/D,CACE,CACF,CAKA,MAAMgB,UAAyBrB,CAAe,CAC5C,YAAYsB,EAAUV,EAAO,CAC3B,MACE,aACA,SAASU,CAAQ,+BACjB,CAAE,SAAAA,CAAQ,CAChB,EACI,KAAK,SAAWA,EAChB,KAAK,MAAQV,EACb,KAAK,WAAa,IACpB,CAEA,MAAM,WAAY,CAKhB,OAHA,KAAK,WAAa,KAAK,MAAM,SAAQ,EAG7B,KAAK,SAAQ,CACrB,IAAK,MACH,KAAK,MAAM,MAAK,EAChB,MACF,IAAK,QACH,KAAK,MAAM,cAAa,EACxB,MACF,IAAK,UACH,KAAK,MAAM,aAAY,EACvB,MACF,QACE,MAAM,IAAI,MAAM,sBAAsB,KAAK,QAAQ,EAAE,CAC3D,CAEI,OAAAR,EAAqB,QAAQC,EAAe,YAAa,CACvD,OAAQ,eACR,SAAU,KAAK,QACrB,CAAK,EAEM,CAAE,SAAU,KAAK,SAAU,QAAS,EAAI,CACjD,CAEA,MAAM,QAAS,CAEb,GAAI,KAAK,WACP,YAAK,MAAM,SAAS,KAAK,UAAU,EAEnCD,EAAqB,QAAQC,EAAe,YAAa,CACvD,OAAQ,gBACR,SAAU,KAAK,QACvB,CAAO,EAEM,CAAE,SAAU,KAAK,SAAU,SAAU,EAAI,EAGlD,MAAM,IAAI,MAAM,8CAA8C,CAChE,CACF,CAKO,MAAMkB,CAAsB,CACjC,aAAc,CACZ,KAAK,eAAiB,CAAA,EACtB,KAAK,aAAe,GACpB,KAAK,eAAiB,GACxB,CAOA,MAAM,eAAeC,EAAS,CAC5B,GAAI,EAAEA,aAAmBxB,GACvB,MAAM,IAAI,MAAM,oCAAoC,EAGtD,MAAMM,EAAS,MAAMkB,EAAQ,QAAO,EAGpC,YAAK,eAAiB,KAAK,eAAe,MAAM,EAAG,KAAK,aAAe,CAAC,EACxE,KAAK,eAAe,KAAKA,CAAO,EAChC,KAAK,aAAe,KAAK,eAAe,OAAS,EAG7C,KAAK,eAAe,OAAS,KAAK,iBACpC,KAAK,eAAe,MAAK,EACzB,KAAK,cAAgB,GAGhBlB,CACT,CAMA,MAAM,MAAO,CACX,GAAI,KAAK,aAAe,EACtB,MAAM,IAAI,MAAM,qBAAqB,EAGvC,MAAMkB,EAAU,KAAK,eAAe,KAAK,YAAY,EACrD,GAAI,CAACA,EAAQ,UACX,MAAM,IAAI,MAAM,WAAWA,EAAQ,IAAI,mBAAmB,EAG5D,MAAMlB,EAAS,MAAMkB,EAAQ,KAAI,EACjC,YAAK,cAAgB,EAEdlB,CACT,CAMA,MAAM,MAAO,CACX,GAAI,KAAK,cAAgB,KAAK,eAAe,OAAS,EACpD,MAAM,IAAI,MAAM,qBAAqB,EAGvC,YAAK,cAAgB,EAGd,MAFS,KAAK,eAAe,KAAK,YAAY,EAEhC,QAAO,CAC9B,CAKA,SAAU,CACR,OAAO,KAAK,cAAgB,GAClB,KAAK,eAAe,KAAK,YAAY,GACrC,KAAK,eAAe,KAAK,YAAY,EAAE,QAAO,CAC1D,CAKA,SAAU,CACR,OAAO,KAAK,aAAe,KAAK,eAAe,OAAS,CAC1D,CAKA,mBAAoB,CAClB,OAAO,KAAK,eAAe,IAAKmB,GAAQA,EAAI,YAAY,CAC1D,CAKA,cAAe,CACb,KAAK,eAAiB,CAAA,EACtB,KAAK,aAAe,EACtB,CAKA,UAAW,CACT,MAAO,CACL,cAAe,KAAK,eAAe,OACnC,aAAc,KAAK,aACnB,QAAS,KAAK,QAAO,EACrB,QAAS,KAAK,QAAO,EACrB,iBAAkB,KAAK,aAAe,CAC5C,CACE,CACF,CAWY,MAACC,EAAwB,IAAIH"}