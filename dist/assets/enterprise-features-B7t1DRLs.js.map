{"version":3,"file":"enterprise-features-B7t1DRLs.js","sources":["../../src/security/html-sanitizer.js","../../src/security/environment.js","../../src/security/data-encryption.js","../../src/workers/sw-manager.js","../../src/sync/medical-sync-manager.js","../../src/workers/medical-service-worker.js"],"sourcesContent":["/**\n * HTML Sanitization Utilities for XSS Prevention\n * iGFAP Stroke Triage Assistant - Enterprise Security\n *\n * Provides secure HTML sanitization to prevent XSS attacks\n *\n * @author iGFAP Project Team\n * @contact Deepak Bos <bosdeepak@gmail.com>\n */\n\n/**\n * Allowed HTML tags for medical content\n */\nconst ALLOWED_TAGS = [\n  \"p\",\n  \"div\",\n  \"span\",\n  \"br\",\n  \"strong\",\n  \"b\",\n  \"em\",\n  \"i\",\n  \"u\",\n  \"h1\",\n  \"h2\",\n  \"h3\",\n  \"h4\",\n  \"h5\",\n  \"h6\",\n  \"ul\",\n  \"ol\",\n  \"li\",\n  \"table\",\n  \"tr\",\n  \"td\",\n  \"th\",\n  \"thead\",\n  \"tbody\",\n  \"small\",\n  \"sub\",\n  \"sup\",\n  \"button\",\n  \"input\",\n  \"form\",\n  \"label\",\n  \"select\",\n  \"option\",\n  \"textarea\",\n  \"a\",\n  \"img\",\n  \"canvas\",\n  \"svg\",\n  \"path\",\n  \"circle\",\n  \"rect\",\n  \"line\",\n  \"g\",\n];\n\n/**\n * Allowed attributes for HTML tags\n */\nconst ALLOWED_ATTRIBUTES = {\n  div: [\n    \"class\",\n    \"id\",\n    \"style\",\n    \"data-id\",\n    \"data-action\",\n    \"data-value\",\n    \"data-module\",\n    \"data-target\",\n  ],\n  span: [\"class\", \"id\", \"style\", \"data-id\"],\n  p: [\"class\", \"style\"],\n  strong: [\"class\"],\n  b: [\"class\"],\n  em: [\"class\"],\n  i: [\"class\"],\n  table: [\"class\"],\n  tr: [\"class\"],\n  td: [\"class\", \"colspan\", \"rowspan\"],\n  th: [\"class\", \"colspan\", \"rowspan\"],\n  ul: [\"class\"],\n  ol: [\"class\"],\n  li: [\"class\"],\n  h1: [\"class\"],\n  h2: [\"class\"],\n  h3: [\"class\"],\n  h4: [\"class\"],\n  h5: [\"class\"],\n  h6: [\"class\"],\n  small: [\"class\"],\n  button: [\"class\", \"id\", \"type\", \"data-action\", \"data-value\", \"data-target\", \"disabled\"],\n  input: [\n    \"class\",\n    \"id\",\n    \"type\",\n    \"name\",\n    \"value\",\n    \"placeholder\",\n    \"required\",\n    \"data-module\",\n    \"autocomplete\",\n    \"readonly\",\n    \"checked\",\n    \"min\",\n    \"max\",\n    \"step\",\n    \"aria-describedby\",\n  ],\n  form: [\"class\", \"id\", \"data-module\", \"action\", \"method\"],\n  label: [\"class\", \"for\"],\n  select: [\"class\", \"id\", \"name\", \"required\"],\n  option: [\"value\", \"selected\"],\n  textarea: [\"class\", \"id\", \"name\", \"placeholder\", \"required\", \"rows\", \"cols\"],\n  a: [\"href\", \"target\", \"class\", \"id\"],\n  img: [\"src\", \"alt\", \"class\", \"id\", \"width\", \"height\"],\n  canvas: [\"class\", \"id\", \"width\", \"height\"],\n  svg: [\"class\", \"id\", \"width\", \"height\", \"viewBox\", \"xmlns\"],\n  path: [\"d\", \"fill\", \"stroke\", \"stroke-width\", \"class\"],\n  circle: [\"cx\", \"cy\", \"r\", \"fill\", \"stroke\", \"stroke-width\", \"class\"],\n  rect: [\"x\", \"y\", \"width\", \"height\", \"fill\", \"stroke\", \"stroke-width\", \"class\"],\n  line: [\"x1\", \"y1\", \"x2\", \"y2\", \"stroke\", \"stroke-width\", \"class\"],\n  g: [\"class\", \"transform\"],\n};\n\n/**\n * Allowed CSS properties for style attributes\n */\nconst ALLOWED_STYLES = [\n  \"color\",\n  \"background-color\",\n  \"font-size\",\n  \"font-weight\",\n  \"text-align\",\n  \"margin\",\n  \"padding\",\n  \"border\",\n  \"display\",\n  \"visibility\",\n  \"opacity\",\n];\n\n/**\n * Sanitize HTML content to prevent XSS attacks\n * @param {string} html - Raw HTML content\n * @param {Object} options - Sanitization options\n * @returns {string} - Sanitized HTML\n */\nexport function sanitizeHTML(html, options = {}) {\n  if (typeof html !== \"string\") {\n    return \"\";\n  }\n\n  // Basic XSS pattern detection\n  if (containsXSSPatterns(html)) {\n    throw new Error(\"Potentially malicious content detected\");\n  }\n\n  // Use browser's DOMParser for parsing\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, \"text/html\");\n\n  // Check for parsing errors\n  const parserError = doc.querySelector(\"parsererror\");\n  if (parserError) {\n    throw new Error(\"Invalid HTML content\");\n  }\n\n  // Sanitize the document\n  sanitizeNode(doc.body, options);\n\n  return doc.body.innerHTML;\n}\n\n/**\n * Check for common XSS patterns\n * @param {string} html - HTML content to check\n * @returns {boolean} - True if XSS patterns detected\n */\nfunction containsXSSPatterns(html) {\n  const xssPatterns = [\n    /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\n    /javascript:/gi,\n    /on\\w+\\s*=/gi,\n    /<iframe\\b(?![^>]*src=[\"'][^\"']*\\/0925\\/)/gi, // Allow our own iframes\n    /<object\\b/gi,\n    /<embed\\b/gi,\n    /<meta\\b/gi,\n    /<link\\b(?![^>]*rel=[\"']manifest)/gi, // Allow manifest links\n  ];\n\n  return xssPatterns.some(pattern => pattern.test(html));\n}\n\n/**\n * Recursively sanitize DOM nodes\n * @param {Node} node - DOM node to sanitize\n * @param {Object} options - Sanitization options\n */\nfunction sanitizeNode(node, options) {\n  const nodesToRemove = [];\n\n  for (let i = 0; i < node.childNodes.length; i++) {\n    const child = node.childNodes[i];\n\n    if (child.nodeType === Node.ELEMENT_NODE) {\n      const tagName = child.tagName.toLowerCase();\n\n      // Remove disallowed tags\n      if (!ALLOWED_TAGS.includes(tagName)) {\n        nodesToRemove.push(child);\n        continue;\n      }\n\n      // Sanitize attributes\n      sanitizeAttributes(child);\n\n      // Recursively sanitize children\n      sanitizeNode(child, options);\n    } else if (child.nodeType === Node.TEXT_NODE) {\n      // Escape text content\n      child.textContent = escapeTextContent(child.textContent);\n    } else {\n      // Remove other node types (comments, etc.)\n      nodesToRemove.push(child);\n    }\n  }\n\n  // Remove flagged nodes\n  nodesToRemove.forEach(nodeToRemove => {\n    node.removeChild(nodeToRemove);\n  });\n}\n\n/**\n * Sanitize element attributes\n * @param {Element} element - Element to sanitize\n */\nfunction sanitizeAttributes(element) {\n  const tagName = element.tagName.toLowerCase();\n  const allowedAttrs = ALLOWED_ATTRIBUTES[tagName] || [];\n  const attrsToRemove = [];\n\n  // Check all attributes\n  for (let i = 0; i < element.attributes.length; i++) {\n    const attr = element.attributes[i];\n    const attrName = attr.name.toLowerCase();\n\n    // Allow any data-* attribute for component islands and UI hooks\n    const isDataAttr = attrName.startsWith(\"data-\");\n\n    if (!allowedAttrs.includes(attrName) && !isDataAttr) {\n      attrsToRemove.push(attrName);\n    } else if (attrName === \"style\") {\n      // Sanitize style attribute\n      element.setAttribute(\"style\", sanitizeStyleAttribute(attr.value));\n    } else {\n      // Escape attribute value\n      element.setAttribute(attrName, escapeAttributeValue(attr.value));\n    }\n  }\n\n  // Remove disallowed attributes\n  attrsToRemove.forEach(attrName => {\n    element.removeAttribute(attrName);\n  });\n}\n\n/**\n * Sanitize CSS in style attributes\n * @param {string} styleValue - CSS style value\n * @returns {string} - Sanitized style value\n */\nfunction sanitizeStyleAttribute(styleValue) {\n  if (!styleValue) {\n    return \"\";\n  }\n\n  const styles = styleValue.split(\";\");\n  const sanitizedStyles = [];\n\n  styles.forEach(style => {\n    const [property, value] = style.split(\":\").map(s => s.trim());\n\n    if (property && value && ALLOWED_STYLES.includes(property.toLowerCase())) {\n      // Basic CSS injection prevention\n      if (!value.includes(\"javascript:\") && !value.includes(\"expression(\")) {\n        sanitizedStyles.push(`${property}: ${value}`);\n      }\n    }\n  });\n\n  return sanitizedStyles.join(\"; \");\n}\n\n/**\n * Escape text content to prevent XSS\n * @param {string} text - Text content\n * @returns {string} - Escaped text\n */\nfunction escapeTextContent(text) {\n  if (!text) {\n    return \"\";\n  }\n\n  return text\n    .replace(/&/g, \"&amp;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/'/g, \"&#x27;\")\n    .replace(/\\//g, \"&#x2F;\");\n}\n\n/**\n * Escape attribute values\n * @param {string} value - Attribute value\n * @returns {string} - Escaped value\n */\nfunction escapeAttributeValue(value) {\n  if (!value) {\n    return \"\";\n  }\n\n  return value\n    .replace(/&/g, \"&amp;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/'/g, \"&#x27;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\");\n}\n\n/**\n * Safe innerHTML replacement\n * @param {Element} element - Target element\n * @param {string} html - HTML content to set\n * @param {Object} options - Sanitization options\n */\nexport function safeSetInnerHTML(element, html, options = {}) {\n  if (!element || typeof html !== \"string\") {\n    return;\n  }\n\n  try {\n    const sanitizedHTML = sanitizeHTML(html, options);\n    element.innerHTML = sanitizedHTML;\n  } catch (error) {\n    console.log(\"errro while setting html\");\n    // Fallback to text content on sanitization error\n    element.textContent = html.replace(/<[^>]*>/g, \"\");\n    throw new Error(`HTML sanitization failed: ${error.message}`);\n  }\n}\n\n/**\n * Create safe HTML string for medical content\n * @param {string} template - HTML template\n * @param {Object} data - Data to interpolate\n * @returns {string} - Safe HTML string\n */\nexport function createSafeHTML(template, data = {}) {\n  if (typeof template !== \"string\") {\n    return \"\";\n  }\n\n  // Basic template interpolation with escaping\n  let html = template;\n\n  Object.keys(data).forEach(key => {\n    const placeholder = new RegExp(`\\\\{\\\\{\\\\s*${key}\\\\s*\\\\}\\\\}`, \"g\");\n    const value = data[key];\n\n    if (typeof value === \"string\") {\n      html = html.replace(placeholder, escapeTextContent(value));\n    } else if (typeof value === \"number\") {\n      html = html.replace(placeholder, value.toString());\n    } else {\n      html = html.replace(placeholder, \"\");\n    }\n  });\n\n  return sanitizeHTML(html);\n}\n\n/**\n * Validate and sanitize medical report content\n * @param {string} content - Medical report content\n * @returns {string} - Sanitized content\n */\nexport function sanitizeMedicalContent(content) {\n  const options = {\n    allowMedicalTags: true,\n    preserveFormatting: true,\n  };\n\n  return sanitizeHTML(content, options);\n}\n","/**\n * Secure Environment Configuration Manager\n * Provides secure access to environment variables with validation and fallbacks\n */\n\nclass EnvironmentConfig {\n  constructor() {\n    this.config = {};\n    this.isInitialized = false;\n    this.initializeConfig();\n  }\n\n  initializeConfig() {\n    try {\n      // Load environment variables (for Node.js environments)\n      if (typeof process !== \"undefined\" && process.env) {\n        this.config = { ...process.env };\n      }\n\n      // For client-side, use secure storage or runtime configuration\n      if (typeof window !== \"undefined\") {\n        this.loadClientConfig();\n      }\n\n      this.isInitialized = true;\n    } catch (error) {\n      console.warn(\"Failed to initialize environment config:\", error.message);\n      this.loadDefaults();\n    }\n  }\n\n  loadClientConfig() {\n    // Client-side configuration with security considerations\n    // Use runtime configuration instead of build-time injection for sensitive data\n    const clientConfig = {\n      // Default values that are safe to expose\n      NODE_ENV: \"production\",\n      DEBUG_MODE: false,\n      MOCK_API_ENABLED: false,\n      LOG_LEVEL: \"info\",\n\n      // Session configuration (safe defaults)\n      SESSION_TIMEOUT_HOURS: 4,\n      BCRYPT_SALT_ROUNDS: 12,\n      ENCRYPTION_KEY_LENGTH: 256,\n\n      // Rate limiting\n      MAX_AUTH_ATTEMPTS: 5,\n      RATE_LIMIT_WINDOW_MS: 900000, // 15 minutes\n\n      // Medical compliance\n      ENABLE_DATA_ENCRYPTION: true,\n      ENABLE_AUDIT_TRAIL: true,\n      DATA_RETENTION_DAYS: 90,\n\n      // GCP configuration (non-sensitive)\n      GCP_PROJECT_ID: \"igfap-452720\",\n      GCP_REGION: \"europe-west3\",\n    };\n\n    // Merge with any runtime configuration\n    this.config = { ...this.config, ...clientConfig };\n  }\n\n  loadDefaults() {\n    // Secure fallback configuration\n    this.config = {\n      NODE_ENV: \"development\",\n      DEBUG_MODE: false,\n      MOCK_API_ENABLED: true,\n      LOG_LEVEL: \"warn\",\n      SESSION_TIMEOUT_HOURS: 4,\n      BCRYPT_SALT_ROUNDS: 12,\n      MAX_AUTH_ATTEMPTS: 3,\n      RATE_LIMIT_WINDOW_MS: 900000,\n      ENABLE_DATA_ENCRYPTION: true,\n      ENABLE_AUDIT_TRAIL: true,\n      DATA_RETENTION_DAYS: 30,\n      GCP_PROJECT_ID: \"igfap-452720\",\n      GCP_REGION: \"europe-west3\",\n    };\n    this.isInitialized = true;\n  }\n\n  /**\n   * Get environment variable with validation and fallback\n   * @param {string} key - Environment variable key\n   * @param {*} defaultValue - Default value if not found\n   * @param {string} type - Expected type (string, number, boolean)\n   * @returns {*} Environment variable value\n   */\n  get(key, defaultValue = null, type = \"string\") {\n    if (!this.isInitialized) {\n      this.initializeConfig();\n    }\n\n    let value = this.config[key];\n\n    // Use default if value is not found\n    if (value === undefined || value === null || value === \"\") {\n      value = defaultValue;\n    }\n\n    // Type conversion and validation\n    try {\n      switch (type) {\n      case \"number\":\n        return value !== null ? Number(value) : defaultValue;\n      case \"boolean\":\n        if (typeof value === \"boolean\") {\n          return value;\n        }\n        return value === \"true\" || value === \"1\" || value === \"yes\";\n      case \"array\":\n        if (Array.isArray(value)) {\n          return value;\n        }\n        return typeof value === \"string\" ? value.split(\",\").map((s) => s.trim()) : defaultValue;\n      case \"string\":\n      default:\n        return value !== null ? String(value) : defaultValue;\n      }\n    } catch (error) {\n      console.warn(`Failed to convert environment variable ${key} to ${type}:`, error.message);\n      return defaultValue;\n    }\n  }\n\n  /**\n   * Get research password securely\n   * @returns {string} Research password\n   */\n  getResearchPassword() {\n    // In production, this should come from secure vault or environment\n    // For development, use environment variable with secure fallback\n    const password = this.get(\"RESEARCH_PASSWORD\");\n\n    // If not in environment, use secure default for research (documented in README)\n    return password || \"Neuro25\";\n  }\n\n  /**\n   * Get API key securely\n   * @param {string} service - Service name (e.g., 'OPENROUTE')\n   * @returns {string} API key or null if not configured\n   */\n  getApiKey(service) {\n    const key = this.get(`${service.toUpperCase()}_API_KEY`);\n    if (!key || key === \"YOUR_API_KEY_HERE\") {\n      return null;\n    }\n    return key;\n  }\n\n  /**\n   * Check if running in development mode\n   * @returns {boolean} True if in development\n   */\n  isDevelopment() {\n    return this.get(\"NODE_ENV\") === \"development\"\n           || typeof window !== \"undefined\" && [\"localhost\", \"127.0.0.1\", \"0.0.0.0\"].includes(window.location.hostname);\n  }\n\n  /**\n   * Check if running in production mode\n   * @returns {boolean} True if in production\n   */\n  isProduction() {\n    return this.get(\"NODE_ENV\") === \"production\" && !this.isDevelopment();\n  }\n\n  /**\n   * Get session configuration\n   * @returns {Object} Session configuration\n   */\n  getSessionConfig() {\n    return {\n      timeoutHours: this.get(\"SESSION_TIMEOUT_HOURS\", 4, \"number\"),\n      secretKey: this.get(\"SESSION_SECRET_KEY\") || this.generateSecretKey(),\n      maxAuthAttempts: this.get(\"MAX_AUTH_ATTEMPTS\", 5, \"number\"),\n      rateLimitWindow: this.get(\"RATE_LIMIT_WINDOW_MS\", 900000, \"number\"),\n    };\n  }\n\n  /**\n   * Get security configuration\n   * @returns {Object} Security configuration\n   */\n  getSecurityConfig() {\n    return {\n      encryptionKeyLength: this.get(\"ENCRYPTION_KEY_LENGTH\", 256, \"number\"),\n      bcryptSaltRounds: this.get(\"BCRYPT_SALT_ROUNDS\", 12, \"number\"),\n      enableDataEncryption: this.get(\"ENABLE_DATA_ENCRYPTION\", true, \"boolean\"),\n      enableAuditTrail: this.get(\"ENABLE_AUDIT_TRAIL\", true, \"boolean\"),\n      dataRetentionDays: this.get(\"DATA_RETENTION_DAYS\", 90, \"number\"),\n    };\n  }\n\n  /**\n   * Get GCP configuration\n   * @returns {Object} GCP configuration\n   */\n  getGcpConfig() {\n    return {\n      projectId: this.get(\"GCP_PROJECT_ID\", \"igfap-452720\"),\n      region: this.get(\"GCP_REGION\", \"europe-west3\"),\n      baseUrl: `https://${this.get(\"GCP_REGION\", \"europe-west3\")}-${this.get(\"GCP_PROJECT_ID\", \"igfap-452720\")}.cloudfunctions.net`,\n    };\n  }\n\n  /**\n   * Generate a secure session secret key\n   * @returns {string} Generated secret key\n   */\n  generateSecretKey() {\n    try {\n      if (typeof crypto !== \"undefined\" && crypto.getRandomValues) {\n        const array = new Uint8Array(32);\n        crypto.getRandomValues(array);\n        return Array.from(array, (byte) => byte.toString(16).padStart(2, \"0\")).join(\"\");\n      }\n    } catch (error) {\n      console.warn(\"Failed to generate cryptographically secure key, using fallback\");\n    }\n\n    // Fallback for environments without crypto.getRandomValues\n    return `fallback-key-${Date.now()}-${Math.random().toString(36).substring(2)}`;\n  }\n\n  /**\n   * Validate configuration integrity\n   * @returns {Object} Validation results\n   */\n  validateConfig() {\n    const issues = [];\n    const warnings = [];\n\n    // Check for required security settings\n    if (!this.get(\"ENABLE_DATA_ENCRYPTION\", true, \"boolean\")) {\n      issues.push(\"Data encryption is disabled in production environment\");\n    }\n\n    if (!this.get(\"ENABLE_AUDIT_TRAIL\", true, \"boolean\")) {\n      warnings.push(\"Audit trail is disabled - may affect compliance\");\n    }\n\n    if (this.get(\"BCRYPT_SALT_ROUNDS\", 12, \"number\") < 10) {\n      issues.push(\"BCrypt salt rounds too low for production security\");\n    }\n\n    if (this.isProduction() && this.get(\"DEBUG_MODE\", false, \"boolean\")) {\n      warnings.push(\"Debug mode enabled in production environment\");\n    }\n\n    // Check for default/example values in production\n    if (this.isProduction()) {\n      const researchPassword = this.get(\"RESEARCH_PASSWORD\");\n      if (!researchPassword || researchPassword === \"Neuro25\") {\n        warnings.push(\"Using default research password in production\");\n      }\n\n      const sessionSecret = this.get(\"SESSION_SECRET_KEY\");\n      if (!sessionSecret || sessionSecret.includes(\"your-secure\")) {\n        issues.push(\"Default session secret in production environment\");\n      }\n    }\n\n    return {\n      isValid: issues.length === 0,\n      issues,\n      warnings,\n      configStatus: {\n        encryption: this.get(\"ENABLE_DATA_ENCRYPTION\", true, \"boolean\"),\n        auditTrail: this.get(\"ENABLE_AUDIT_TRAIL\", true, \"boolean\"),\n        development: this.isDevelopment(),\n        production: this.isProduction(),\n      },\n    };\n  }\n\n  /**\n   * Get sanitized configuration for logging/debugging\n   * @returns {Object} Safe configuration object (no secrets)\n   */\n  getSafeConfig() {\n    const safeKeys = [\n      \"NODE_ENV\", \"DEBUG_MODE\", \"MOCK_API_ENABLED\", \"LOG_LEVEL\",\n      \"SESSION_TIMEOUT_HOURS\", \"BCRYPT_SALT_ROUNDS\", \"ENCRYPTION_KEY_LENGTH\",\n      \"MAX_AUTH_ATTEMPTS\", \"RATE_LIMIT_WINDOW_MS\",\n      \"ENABLE_DATA_ENCRYPTION\", \"ENABLE_AUDIT_TRAIL\", \"DATA_RETENTION_DAYS\",\n      \"GCP_PROJECT_ID\", \"GCP_REGION\",\n    ];\n\n    const safeConfig = {};\n    safeKeys.forEach((key) => {\n      safeConfig[key] = this.config[key];\n    });\n\n    return safeConfig;\n  }\n}\n\n// Create singleton instance\nconst environmentConfig = new EnvironmentConfig();\n\n// Export convenience functions\nexport const getEnv = (key, defaultValue, type) => environmentConfig.get(key, defaultValue, type);\nexport const getResearchPassword = () => environmentConfig.getResearchPassword();\nexport const getApiKey = (service) => environmentConfig.getApiKey(service);\nexport const isDevelopment = () => environmentConfig.isDevelopment();\nexport const isProduction = () => environmentConfig.isProduction();\nexport const getSessionConfig = () => environmentConfig.getSessionConfig();\nexport const getSecurityConfig = () => environmentConfig.getSecurityConfig();\nexport const getGcpConfig = () => environmentConfig.getGcpConfig();\nexport const validateConfig = () => environmentConfig.validateConfig();\nexport const getSafeConfig = () => environmentConfig.getSafeConfig();\n\n// Export main class\nexport default environmentConfig;\n","/**\n * Medical Data Encryption System\n * iGFAP Stroke Triage Assistant - HIPAA-Compliant Data Protection\n *\n * Provides client-side encryption for sensitive medical data in storage\n * Uses Web Crypto API with AES-GCM encryption for maximum security\n *\n * @author iGFAP Project Team\n * @contact Deepak Bos <bosdeepak@gmail.com>\n */\n\nimport { safeAsync, ERROR_CATEGORIES, ERROR_SEVERITY } from \"../utils/error-handler.js\";\nimport { medicalLogger, LOG_CATEGORIES } from \"../utils/medical-logger.js\";\n\n/**\n * @typedef {Object} EncryptedData\n * @property {string} encrypted - Base64 encoded encrypted data\n * @property {string} iv - Base64 encoded initialization vector\n * @property {string} version - Encryption version for compatibility\n * @property {number} timestamp - Encryption timestamp\n */\n\n/**\n * Medical Data Encryption Manager\n */\nexport class MedicalDataEncryption {\n  constructor() {\n    this.algorithm = \"AES-GCM\";\n    this.keyLength = 256;\n    this.ivLength = 12; // 96 bits for AES-GCM\n    this.version = \"1.0\";\n    this.encryptionKey = null;\n    this.isSupported = this.checkWebCryptoSupport();\n\n    if (this.isSupported) {\n      this.initializeEncryption();\n    } else {\n      medicalLogger.warn(\"Web Crypto API not supported, falling back to unencrypted storage\", {\n        category: LOG_CATEGORIES.SECURITY,\n      });\n    }\n  }\n\n  /**\n   * Check if Web Crypto API is supported\n   */\n  checkWebCryptoSupport() {\n    return typeof window !== \"undefined\"\n           && window.crypto\n           && window.crypto.subtle\n           && typeof window.crypto.subtle.encrypt === \"function\";\n  }\n\n  /**\n   * Initialize encryption with derived key\n   */\n  async initializeEncryption() {\n    return safeAsync(\n      async () => {\n        // Generate or retrieve session-based key material\n        const keyMaterial = await this.getOrCreateKeyMaterial();\n\n        // Derive encryption key from key material\n        this.encryptionKey = await window.crypto.subtle.deriveKey(\n          {\n            name: \"PBKDF2\",\n            salt: new TextEncoder().encode(\"iGFAP-Medical-2024\"), // Static salt for session consistency\n            iterations: 100000,\n            hash: \"SHA-256\",\n          },\n          keyMaterial,\n          {\n            name: this.algorithm,\n            length: this.keyLength,\n          },\n          false, // Not extractable for security\n          [\"encrypt\", \"decrypt\"],\n        );\n\n        medicalLogger.info(\"Medical data encryption initialized\", {\n          category: LOG_CATEGORIES.SECURITY,\n          algorithm: this.algorithm,\n          keyLength: this.keyLength,\n        });\n\n        return true;\n      },\n      {\n        category: ERROR_CATEGORIES.SECURITY,\n        severity: ERROR_SEVERITY.HIGH,\n        context: { operation: \"encryption_initialization\" },\n      },\n    );\n  }\n\n  /**\n   * Get or create key material for encryption\n   */\n  async getOrCreateKeyMaterial() {\n    return safeAsync(\n      async () => {\n        // Try to get existing key material from session\n        let keyData = sessionStorage.getItem(\"_medical_km\");\n\n        if (!keyData) {\n          // Generate new key material for this session\n          const randomBytes = window.crypto.getRandomValues(new Uint8Array(32));\n          keyData = Array.from(randomBytes, (byte) => byte.toString(16).padStart(2, \"0\")).join(\"\");\n          sessionStorage.setItem(\"_medical_km\", keyData);\n\n          medicalLogger.debug(\"Generated new encryption key material\", {\n            category: LOG_CATEGORIES.SECURITY,\n          });\n        }\n\n        // Convert hex string back to Uint8Array\n        const keyBytes = new Uint8Array(keyData.match(/.{1,2}/g).map((byte) => parseInt(byte, 16)));\n\n        // Import key material\n        return await window.crypto.subtle.importKey(\n          \"raw\",\n          keyBytes,\n          \"PBKDF2\",\n          false,\n          [\"deriveKey\"],\n        );\n      },\n      {\n        category: ERROR_CATEGORIES.SECURITY,\n        context: { operation: \"key_material_generation\" },\n      },\n    );\n  }\n\n  /**\n   * Encrypt sensitive data\n   * @param {any} data - Data to encrypt\n   * @returns {Promise<EncryptedData|string>} Encrypted data object or original data if encryption fails\n   */\n  async encryptData(data) {\n    if (!this.isSupported || !this.encryptionKey) {\n      medicalLogger.warn(\"Encryption not available, storing data unencrypted\", {\n        category: LOG_CATEGORIES.SECURITY,\n      });\n      return JSON.stringify(data);\n    }\n\n    return safeAsync(\n      async () => {\n        // Convert data to JSON string\n        const jsonString = JSON.stringify(data);\n        const dataBytes = new TextEncoder().encode(jsonString);\n\n        // Generate random IV\n        const iv = window.crypto.getRandomValues(new Uint8Array(this.ivLength));\n\n        // Encrypt the data\n        const encryptedBuffer = await window.crypto.subtle.encrypt(\n          {\n            name: this.algorithm,\n            iv,\n          },\n          this.encryptionKey,\n          dataBytes,\n        );\n\n        // Convert to base64 for storage\n        const encryptedArray = new Uint8Array(encryptedBuffer);\n        const encryptedBase64 = btoa(String.fromCharCode(...encryptedArray));\n        const ivBase64 = btoa(String.fromCharCode(...iv));\n\n        const encryptedData = {\n          encrypted: encryptedBase64,\n          iv: ivBase64,\n          version: this.version,\n          timestamp: Date.now(),\n        };\n\n        medicalLogger.debug(\"Data encrypted successfully\", {\n          category: LOG_CATEGORIES.SECURITY,\n          dataSize: jsonString.length,\n        });\n\n        return JSON.stringify(encryptedData);\n      },\n      {\n        category: ERROR_CATEGORIES.SECURITY,\n        severity: ERROR_SEVERITY.MEDIUM,\n        fallback: () => {\n          medicalLogger.warn(\"Encryption failed, storing data unencrypted\", {\n            category: LOG_CATEGORIES.SECURITY,\n          });\n          return JSON.stringify(data);\n        },\n        context: { operation: \"data_encryption\" },\n      },\n    );\n  }\n\n  /**\n   * Decrypt sensitive data\n   * @param {string} encryptedDataString - Encrypted data string\n   * @returns {Promise<any>} Decrypted data or null if decryption fails\n   */\n  async decryptData(encryptedDataString) {\n    if (!encryptedDataString) {\n      return null;\n    }\n\n    return safeAsync(\n      async () => {\n        let encryptedData;\n        try {\n          encryptedData = JSON.parse(encryptedDataString);\n        } catch (parseError) {\n          // Might be unencrypted legacy data\n          medicalLogger.debug(\"Data appears to be unencrypted legacy format\", {\n            category: LOG_CATEGORIES.SECURITY,\n          });\n          return JSON.parse(encryptedDataString);\n        }\n\n        // Check if this is encrypted data\n        if (!encryptedData.encrypted || !encryptedData.iv) {\n          // Assume it's unencrypted data\n          return encryptedData;\n        }\n\n        if (!this.isSupported || !this.encryptionKey) {\n          medicalLogger.warn(\"Cannot decrypt data: encryption not available\", {\n            category: LOG_CATEGORIES.SECURITY,\n          });\n          return null;\n        }\n\n        // Convert base64 back to Uint8Array\n        const encryptedBytes = new Uint8Array(\n          atob(encryptedData.encrypted)\n            .split(\"\")\n            .map((char) => char.charCodeAt(0)),\n        );\n\n        const iv = new Uint8Array(\n          atob(encryptedData.iv)\n            .split(\"\")\n            .map((char) => char.charCodeAt(0)),\n        );\n\n        // Decrypt the data\n        const decryptedBuffer = await window.crypto.subtle.decrypt(\n          {\n            name: this.algorithm,\n            iv,\n          },\n          this.encryptionKey,\n          encryptedBytes,\n        );\n\n        // Convert back to string and parse JSON\n        const decryptedString = new TextDecoder().decode(decryptedBuffer);\n        const decryptedData = JSON.parse(decryptedString);\n\n        medicalLogger.debug(\"Data decrypted successfully\", {\n          category: LOG_CATEGORIES.SECURITY,\n          dataSize: decryptedString.length,\n        });\n\n        return decryptedData;\n      },\n      {\n        category: ERROR_CATEGORIES.SECURITY,\n        severity: ERROR_SEVERITY.MEDIUM,\n        fallback: () => {\n          medicalLogger.warn(\"Decryption failed, returning null\", {\n            category: LOG_CATEGORIES.SECURITY,\n          });\n          return null;\n        },\n        context: { operation: \"data_decryption\" },\n      },\n    );\n  }\n\n  /**\n   * Securely store encrypted data\n   * @param {string} key - Storage key\n   * @param {any} data - Data to store\n   * @param {boolean} useSessionStorage - Use sessionStorage instead of localStorage\n   */\n  async secureStore(key, data, useSessionStorage = false) {\n    return safeAsync(\n      async () => {\n        const storage = useSessionStorage ? sessionStorage : localStorage;\n\n        // Encrypt the data\n        const encryptedData = await this.encryptData(data);\n\n        // Store with encrypted prefix to identify encrypted data\n        const storageKey = `_enc_${key}`;\n        storage.setItem(storageKey, encryptedData);\n\n        medicalLogger.debug(\"Data stored securely\", {\n          category: LOG_CATEGORIES.SECURITY,\n          key: storageKey,\n          storage: useSessionStorage ? \"session\" : \"local\",\n        });\n\n        return true;\n      },\n      {\n        category: ERROR_CATEGORIES.STORAGE,\n        context: { operation: \"secure_store\", key },\n      },\n    );\n  }\n\n  /**\n   * Securely retrieve and decrypt data\n   * @param {string} key - Storage key\n   * @param {boolean} useSessionStorage - Use sessionStorage instead of localStorage\n   * @returns {Promise<any>} Decrypted data or null\n   */\n  async secureRetrieve(key, useSessionStorage = false) {\n    return safeAsync(\n      async () => {\n        const storage = useSessionStorage ? sessionStorage : localStorage;\n        const storageKey = `_enc_${key}`;\n\n        const encryptedData = storage.getItem(storageKey);\n        if (!encryptedData) {\n          // Try legacy unencrypted key\n          const legacyData = storage.getItem(key);\n          if (legacyData) {\n            medicalLogger.debug(\"Retrieved legacy unencrypted data\", {\n              category: LOG_CATEGORIES.SECURITY,\n              key,\n            });\n            try {\n              return JSON.parse(legacyData);\n            } catch (error) {\n              return legacyData;\n            }\n          }\n          return null;\n        }\n\n        // Decrypt the data\n        const decryptedData = await this.decryptData(encryptedData);\n\n        medicalLogger.debug(\"Data retrieved securely\", {\n          category: LOG_CATEGORIES.SECURITY,\n          key: storageKey,\n          storage: useSessionStorage ? \"session\" : \"local\",\n          hasData: !!decryptedData,\n        });\n\n        return decryptedData;\n      },\n      {\n        category: ERROR_CATEGORIES.STORAGE,\n        context: { operation: \"secure_retrieve\", key },\n      },\n    );\n  }\n\n  /**\n   * Securely remove data\n   * @param {string} key - Storage key\n   * @param {boolean} useSessionStorage - Use sessionStorage instead of localStorage\n   */\n  async secureRemove(key, useSessionStorage = false) {\n    return safeAsync(\n      async () => {\n        const storage = useSessionStorage ? sessionStorage : localStorage;\n        const storageKey = `_enc_${key}`;\n\n        // Remove both encrypted and legacy versions\n        storage.removeItem(storageKey);\n        storage.removeItem(key);\n\n        medicalLogger.debug(\"Data removed securely\", {\n          category: LOG_CATEGORIES.SECURITY,\n          key: storageKey,\n          storage: useSessionStorage ? \"session\" : \"local\",\n        });\n\n        return true;\n      },\n      {\n        category: ERROR_CATEGORIES.STORAGE,\n        context: { operation: \"secure_remove\", key },\n      },\n    );\n  }\n\n  /**\n   * Check if data is encrypted\n   * @param {string} dataString - Data string to check\n   * @returns {boolean} True if data appears to be encrypted\n   */\n  isDataEncrypted(dataString) {\n    try {\n      const parsed = JSON.parse(dataString);\n      return !!(parsed.encrypted && parsed.iv && parsed.version);\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Migrate legacy unencrypted data to encrypted format\n   * @param {string} key - Storage key\n   * @param {boolean} useSessionStorage - Use sessionStorage instead of localStorage\n   */\n  async migrateLegacyData(key, useSessionStorage = false) {\n    return safeAsync(\n      async () => {\n        const storage = useSessionStorage ? sessionStorage : localStorage;\n        const legacyData = storage.getItem(key);\n\n        if (legacyData && !this.isDataEncrypted(legacyData)) {\n          medicalLogger.info(\"Migrating legacy unencrypted data\", {\n            category: LOG_CATEGORIES.SECURITY,\n            key,\n          });\n\n          // Parse legacy data\n          let parsedData;\n          try {\n            parsedData = JSON.parse(legacyData);\n          } catch (error) {\n            parsedData = legacyData;\n          }\n\n          // Store encrypted version\n          await this.secureStore(key.replace(\"_enc_\", \"\"), parsedData, useSessionStorage);\n\n          // Remove legacy version\n          storage.removeItem(key);\n\n          medicalLogger.info(\"Legacy data migration completed\", {\n            category: LOG_CATEGORIES.SECURITY,\n            key,\n          });\n\n          return true;\n        }\n\n        return false;\n      },\n      {\n        category: ERROR_CATEGORIES.STORAGE,\n        context: { operation: \"migrate_legacy_data\", key },\n      },\n    );\n  }\n\n  /**\n   * Clear all encryption keys (for logout)\n   */\n  clearEncryptionKeys() {\n    try {\n      sessionStorage.removeItem(\"_medical_km\");\n      this.encryptionKey = null;\n\n      medicalLogger.info(\"Encryption keys cleared\", {\n        category: LOG_CATEGORIES.SECURITY,\n      });\n    } catch (error) {\n      medicalLogger.warn(\"Failed to clear encryption keys\", {\n        category: LOG_CATEGORIES.SECURITY,\n        error: error.message,\n      });\n    }\n  }\n\n  /**\n   * Get encryption status\n   */\n  getStatus() {\n    return {\n      isSupported: this.isSupported,\n      isInitialized: !!this.encryptionKey,\n      algorithm: this.algorithm,\n      keyLength: this.keyLength,\n      version: this.version,\n    };\n  }\n}\n\n// Create global instance\nexport const medicalEncryption = new MedicalDataEncryption();\n\n// Convenience functions\nexport const secureStore = (key, data, useSessionStorage = false) => medicalEncryption.secureStore(key, data, useSessionStorage);\n\nexport const secureRetrieve = (key, useSessionStorage = false) => medicalEncryption.secureRetrieve(key, useSessionStorage);\n\nexport const secureRemove = (key, useSessionStorage = false) => medicalEncryption.secureRemove(key, useSessionStorage);\n\nexport const clearEncryptionKeys = () => medicalEncryption.clearEncryptionKeys();\n","/**\n * Service Worker Manager for Medical Application\n * iGFAP Stroke Triage Assistant - Phase 3 Advanced Features\n *\n * Manages service worker lifecycle and offline capabilities\n */\n\nimport { medicalEventObserver, MEDICAL_EVENTS } from \"../patterns/observer.js\";\nimport {\n  medicalPerformanceMonitor,\n  PerformanceMetricType,\n} from \"../performance/medical-performance-monitor.js\";\nimport { safeSetInnerHTML } from \"../security/html-sanitizer.js\";\n\n// Bulletproof error handling utilities\nimport {\n  safeAsync,\n  MedicalError,\n  ERROR_CATEGORIES,\n  ERROR_SEVERITY,\n  MEDICAL_ERROR_CODES,\n} from \"../utils/error-handler.js\";\n\n/**\n * Service Worker Manager Class\n */\nexport class MedicalServiceWorkerManager {\n  constructor() {\n    this.registration = null;\n    this.isOnline = navigator.onLine;\n    this.updateAvailable = false;\n    this.isUpdateCheckEnabled = true;\n    this.retryCount = 0;\n    this.maxRetries = 3;\n\n    // Initialize event listeners\n    this.setupEventListeners();\n  }\n\n  /**\n   * Initialize service worker registration with bulletproof error handling\n   */\n  async initialize() {\n    return safeAsync(\n      async () => {\n        if (!(\"serviceWorker\" in navigator)) {\n          throw new MedicalError(\n            \"Service Worker not supported in this browser\",\n            \"SW_NOT_SUPPORTED\",\n            ERROR_CATEGORIES.STORAGE,\n            ERROR_SEVERITY.MEDIUM\n          ).withContext({ userAgent: navigator.userAgent });\n        }\n\n        const metricId = medicalPerformanceMonitor.startMeasurement(\n          PerformanceMetricType.USER_INTERACTION,\n          \"service_worker_registration\"\n        );\n\n        try {\n          // Register service worker with timeout\n          const registrationPromise = navigator.serviceWorker.register(\n            \"/0925/src/workers/medical-service-worker.js\",\n            {\n              scope: \"/0925/\",\n              updateViaCache: \"none\",\n            }\n          );\n\n          this.registration = await Promise.race([\n            registrationPromise,\n            new Promise((_, reject) =>\n              setTimeout(() => reject(new Error(\"Service Worker registration timeout\")), 30000)\n            ),\n          ]);\n\n          if (!this.registration) {\n            throw new MedicalError(\n              \"Service Worker registration returned null\",\n              \"SW_REGISTRATION_NULL\",\n              ERROR_CATEGORIES.STORAGE,\n              ERROR_SEVERITY.HIGH\n            );\n          }\n\n          // ('🏥 Medical Service Worker registered successfully');\n\n          // Setup components with error handling\n          await Promise.allSettled([\n            safeAsync(() => this.setupUpdateDetection(), null, {\n              operation: \"setup_update_detection\",\n            }),\n            safeAsync(() => this.setupMessageHandler(), null, {\n              operation: \"setup_message_handler\",\n            }),\n            safeAsync(() => this.checkForUpdates(), null, { operation: \"initial_update_check\" }),\n          ]);\n\n          medicalPerformanceMonitor.endMeasurement(metricId, { success: true });\n\n          medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n            action: \"sw_registered\",\n            scope: this.registration.scope,\n          });\n\n          return true;\n        } catch (error) {\n          medicalPerformanceMonitor.endMeasurement(metricId, {\n            success: false,\n            error: error.message,\n          });\n\n          throw error;\n        }\n      },\n      error => {\n        console.error(\"Service Worker initialization failed:\", error.message);\n\n        medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n          action: \"sw_registration_failed\",\n          error: error.message,\n          context: error.context || {},\n        });\n\n        return false;\n      },\n      {\n        category: ERROR_CATEGORIES.STORAGE,\n        severity: ERROR_SEVERITY.MEDIUM,\n        timeout: 35000,\n        context: {\n          operation: \"service_worker_initialization\",\n        },\n      }\n    );\n  }\n\n  /**\n   * Setup event listeners for online/offline detection\n   */\n  setupEventListeners() {\n    // Online/offline detection\n    window.addEventListener(\"online\", () => {\n      this.isOnline = true;\n      this.handleOnlineStatusChange(true);\n    });\n\n    window.addEventListener(\"offline\", () => {\n      this.isOnline = false;\n      this.handleOnlineStatusChange(false);\n    });\n\n    // Page visibility for update checks\n    document.addEventListener(\"visibilitychange\", () => {\n      if (!document.hidden && this.isUpdateCheckEnabled) {\n        this.checkForUpdates();\n      }\n    });\n\n    // Periodic update checks\n    setInterval(\n      () => {\n        if (this.isUpdateCheckEnabled && this.isOnline) {\n          this.checkForUpdates();\n        }\n      },\n      5 * 60 * 1000\n    ); // Check every 5 minutes\n  }\n\n  /**\n   * Setup service worker update detection\n   */\n  setupUpdateDetection() {\n    if (!this.registration) {\n      return;\n    }\n\n    // Listen for new service worker installing\n    this.registration.addEventListener(\"updatefound\", () => {\n      const newWorker = this.registration.installing;\n\n      newWorker.addEventListener(\"statechange\", () => {\n        if (newWorker.state === \"installed\" && navigator.serviceWorker.controller) {\n          // New update available\n          this.updateAvailable = true;\n          this.notifyUpdateAvailable();\n        }\n      });\n    });\n\n    // Listen for service worker taking control\n    navigator.serviceWorker.addEventListener(\"controllerchange\", () => {\n      window.location.reload();\n    });\n  }\n\n  /**\n   * Setup message handler for service worker communication\n   */\n  setupMessageHandler() {\n    navigator.serviceWorker.addEventListener(\"message\", event => {\n      const { type, data } = event.data;\n\n      switch (type) {\n      case \"SW_INSTALLED\":\n        this.handleServiceWorkerInstalled(data);\n        break;\n\n      case \"SW_ACTIVATED\":\n        this.handleServiceWorkerActivated(data);\n        break;\n\n      case \"SW_INSTALL_ERROR\":\n        this.handleServiceWorkerError(data);\n        break;\n\n      case \"MEDICAL_DATA_SYNCED\":\n        this.handleMedicalDataSynced(data);\n        break;\n\n      default:\n        // ('Unknown service worker message:', type, data);\n      }\n    });\n  }\n\n  /**\n   * Handle online/offline status changes with error handling\n   */\n  handleOnlineStatusChange(isOnline) {\n    safeAsync(\n      async () => {\n        // (`🌐 Network status: ${isOnline ? 'Online' : 'Offline'}`);\n\n        medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n          action: \"network_status_changed\",\n          isOnline,\n          timestamp: new Date().toISOString(),\n        });\n\n        // Show user notification with error handling\n        await safeAsync(() => this.showNetworkStatusNotification(isOnline), null, {\n          operation: \"show_network_notification\",\n        });\n\n        // Trigger background sync when coming back online\n        if (isOnline && \"serviceWorker\" in navigator && navigator.serviceWorker.controller) {\n          await safeAsync(\n            async () => {\n              const registration = await navigator.serviceWorker.ready;\n              if (\"sync\" in registration) {\n                return registration.sync.register(\"medical-data-sync\");\n              }\n            },\n            error => {\n              console.warn(\"Background sync registration failed:\", error.message);\n            },\n            {\n              operation: \"background_sync_registration\",\n              timeout: 5000,\n            }\n          );\n        }\n      },\n      error => {\n        console.error(\"Error handling network status change:\", error.message);\n      },\n      {\n        operation: \"handle_network_status_change\",\n        isOnline,\n      }\n    );\n  }\n\n  /**\n   * Show network status notification to user with comprehensive error handling\n   */\n  showNetworkStatusNotification(isOnline) {\n    return safeAsync(\n      async () => {\n        if (!document || !document.body) {\n          throw new MedicalError(\n            \"Document not available for notification\",\n            \"DOCUMENT_UNAVAILABLE\",\n            ERROR_CATEGORIES.RENDERING,\n            ERROR_SEVERITY.LOW\n          );\n        }\n\n        const notification = document.createElement(\"div\");\n        if (!notification) {\n          throw new MedicalError(\n            \"Failed to create notification element\",\n            \"ELEMENT_CREATION_FAILED\",\n            ERROR_CATEGORIES.RENDERING,\n            ERROR_SEVERITY.LOW\n          );\n        }\n\n        notification.className = `network-notification ${isOnline ? \"online\" : \"offline\"}`;\n\n        try {\n          safeSetInnerHTML(\n            notification,\n            `\n            <div class=\"notification-content\">\n              <span class=\"notification-icon\">${isOnline ? \"🌐\" : \"📴\"}</span>\n              <span class=\"notification-text\">\n                ${isOnline ? \"Connection restored\" : \"Working offline\"}\n              </span>\n            </div>\n          `\n          );\n        } catch (htmlError) {\n          console.warn(\n            \"Network notification sanitization failed, using fallback:\",\n            htmlError.message\n          );\n          notification.textContent = isOnline ? \"🌐 Connection restored\" : \"📴 Working offline\";\n        }\n\n        // Check if body is still available before appending\n        if (!document.body) {\n          throw new MedicalError(\n            \"Document body not available when appending notification\",\n            \"BODY_UNAVAILABLE\",\n            ERROR_CATEGORIES.RENDERING,\n            ERROR_SEVERITY.LOW\n          );\n        }\n\n        document.body.appendChild(notification);\n\n        // Auto-remove after 3 seconds with error handling\n        setTimeout(() => {\n          safeAsync(\n            () => {\n              if (notification && notification.parentNode) {\n                notification.parentNode.removeChild(notification);\n              }\n            },\n            null,\n            { operation: \"remove_notification\" }\n          );\n        }, 3000);\n\n        return notification;\n      },\n      error => {\n        console.warn(\"Failed to show network status notification:\", error.message);\n        // Try simple fallback notification\n        try {\n          if (console && console.info) {\n            console.info(`Network status: ${isOnline ? \"Online\" : \"Offline\"}`);\n          }\n        } catch (fallbackError) {\n          // Even console failed, nothing more we can do\n        }\n        return null;\n      },\n      {\n        operation: \"show_network_notification\",\n        isOnline,\n      }\n    );\n  }\n\n  /**\n   * Check for service worker updates with bulletproof error handling\n   */\n  async checkForUpdates() {\n    return safeAsync(\n      async () => {\n        if (!this.registration) {\n          throw new MedicalError(\n            \"No service worker registration available for update check\",\n            \"NO_REGISTRATION\",\n            ERROR_CATEGORIES.STORAGE,\n            ERROR_SEVERITY.LOW\n          );\n        }\n\n        // Add timeout to update check\n        const updatePromise = this.registration.update();\n        const timeoutPromise = new Promise((_, reject) =>\n          setTimeout(() => reject(new Error(\"Update check timeout\")), 10000)\n        );\n\n        await Promise.race([updatePromise, timeoutPromise]);\n\n        // Reset retry count on successful update check\n        this.retryCount = 0;\n\n        return true;\n      },\n      error => {\n        console.warn(\"Update check failed:\", error.message);\n\n        this.retryCount++;\n        if (this.retryCount < this.maxRetries) {\n          // Exponential backoff for retries\n          const retryDelay = Math.min(5000 * 2 ** (this.retryCount - 1), 30000);\n\n          setTimeout(() => {\n            safeAsync(() => this.checkForUpdates(), null, {\n              operation: \"retry_update_check\",\n              retryCount: this.retryCount,\n            });\n          }, retryDelay);\n        } else {\n          console.error(`Update check failed after ${this.maxRetries} retries`);\n          medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n            action: \"sw_update_check_failed\",\n            retryCount: this.retryCount,\n            error: error.message,\n          });\n        }\n\n        return false;\n      },\n      {\n        operation: \"service_worker_update_check\",\n        retryCount: this.retryCount,\n      }\n    );\n  }\n\n  /**\n   * Apply available update\n   */\n  async applyUpdate() {\n    if (!this.updateAvailable || !this.registration) {\n      return;\n    }\n\n    try {\n      // Send message to service worker to skip waiting\n      if (this.registration.waiting) {\n        this.registration.waiting.postMessage({ type: \"SKIP_WAITING\" });\n      }\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: \"sw_update_applied\",\n      });\n    } catch (error) {\n      // ('Failed to apply update:', error);\n    }\n  }\n\n  /**\n   * Notify user of available update\n   */\n  notifyUpdateAvailable() {\n    // ('📱 App update available');\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: \"sw_update_available\",\n    });\n\n    // Show update notification\n    this.showUpdateNotification();\n  }\n\n  /**\n   * Show update notification to user\n   */\n  showUpdateNotification() {\n    const notification = document.createElement(\"div\");\n    notification.className = \"update-notification\";\n    try {\n      safeSetInnerHTML(\n        notification,\n        `\n        <div class=\"notification-content\">\n          <span class=\"notification-icon\">🔄</span>\n          <span class=\"notification-text\">App update available</span>\n          <button class=\"update-button\" onclick=\"medicalSWManager.applyUpdate()\">\n            Update Now\n          </button>\n        </div>\n      `\n      );\n    } catch (error) {\n      console.error(\"Update notification sanitization failed:\", error);\n      // Safe fallback using textContent only\n      notification.textContent = \"🔄 App update available. Please refresh to update.\";\n    }\n\n    document.body.appendChild(notification);\n  }\n\n  /**\n   * Get cache status with timeout and error handling\n   */\n  async getCacheStatus() {\n    return safeAsync(\n      async () => {\n        if (!navigator.serviceWorker || !navigator.serviceWorker.controller) {\n          throw new MedicalError(\n            \"Service worker controller not available\",\n            \"NO_SW_CONTROLLER\",\n            ERROR_CATEGORIES.STORAGE,\n            ERROR_SEVERITY.LOW\n          );\n        }\n\n        return new Promise((resolve, reject) => {\n          const channel = new MessageChannel();\n          const timeout = setTimeout(() => {\n            reject(new Error(\"Cache status request timeout\"));\n          }, 5000);\n\n          channel.port1.onmessage = event => {\n            clearTimeout(timeout);\n            try {\n              // Validate response structure\n              if (!event.data || typeof event.data !== \"object\") {\n                throw new Error(\"Invalid cache status response format\");\n              }\n              resolve(event.data);\n            } catch (error) {\n              reject(error);\n            }\n          };\n\n          channel.port1.onerror = error => {\n            clearTimeout(timeout);\n            reject(new Error(`Message channel error: ${error.message || \"Unknown error\"}`));\n          };\n\n          try {\n            navigator.serviceWorker.controller.postMessage({ type: \"GET_CACHE_STATUS\" }, [\n              channel.port2,\n            ]);\n          } catch (postError) {\n            clearTimeout(timeout);\n            reject(new Error(`Failed to send cache status request: ${postError.message}`));\n          }\n        });\n      },\n      error => {\n        console.warn(\"Failed to get cache status:\", error.message);\n        return {\n          error: true,\n          message: error.message,\n          timestamp: new Date().toISOString(),\n        };\n      },\n      {\n        operation: \"get_cache_status\",\n      }\n    );\n  }\n\n  /**\n   * Clear all caches\n   */\n  async clearCaches() {\n    if (!navigator.serviceWorker.controller) {\n      return;\n    }\n\n    navigator.serviceWorker.controller.postMessage({\n      type: \"CLEAR_CACHE\",\n    });\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: \"sw_caches_cleared\",\n    });\n  }\n\n  /**\n   * Prefetch resources for offline use\n   */\n  async prefetchResources(resources) {\n    if (!navigator.serviceWorker.controller) {\n      return;\n    }\n\n    navigator.serviceWorker.controller.postMessage({\n      type: \"PREFETCH_RESOURCES\",\n      data: { resources },\n    });\n  }\n\n  /**\n   * Handle service worker installed event\n   */\n  handleServiceWorkerInstalled(data) {\n    // ('✅ Service Worker installed:', data);\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: \"sw_installed\",\n      cacheVersion: data.cacheVersion,\n      criticalResourcesCount: data.criticalResourcesCount,\n    });\n  }\n\n  /**\n   * Handle service worker activated event\n   */\n  handleServiceWorkerActivated(data) {\n    // ('🚀 Service Worker activated:', data);\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: \"sw_activated\",\n      cacheVersion: data.cacheVersion,\n      cleanedCaches: data.cleanedCaches,\n    });\n  }\n\n  /**\n   * Handle service worker error\n   */\n  handleServiceWorkerError(data) {\n    // ('❌ Service Worker error:', data);\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: \"sw_error\",\n      error: data.error,\n    });\n  }\n\n  /**\n   * Handle medical data sync completion\n   */\n  handleMedicalDataSynced(data) {\n    // ('🔄 Medical data synced:', data);\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: \"medical_data_synced\",\n      timestamp: data.timestamp,\n    });\n  }\n\n  /**\n   * Get offline capabilities status\n   */\n  getOfflineStatus() {\n    return {\n      isOnline: this.isOnline,\n      serviceWorkerActive: !!navigator.serviceWorker.controller,\n      updateAvailable: this.updateAvailable,\n      cacheStatus: this.registration ? \"available\" : \"unavailable\",\n    };\n  }\n\n  /**\n   * Enable/disable automatic update checks\n   */\n  setUpdateCheckEnabled(enabled) {\n    this.isUpdateCheckEnabled = enabled;\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: \"sw_update_check_toggled\",\n      enabled,\n    });\n  }\n}\n\n/**\n * Install-time prompts for offline support\n */\nexport class OfflineInstallPrompt {\n  constructor(swManager) {\n    this.swManager = swManager;\n    this.installPromptEvent = null;\n    this.isInstallable = false;\n\n    this.setupInstallPrompt();\n  }\n\n  /**\n   * Setup PWA install prompt handling\n   */\n  setupInstallPrompt() {\n    // Listen for install prompt\n    window.addEventListener(\"beforeinstallprompt\", event => {\n      event.preventDefault();\n      this.installPromptEvent = event;\n      this.isInstallable = true;\n\n      // ('📱 PWA install prompt available');\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: \"pwa_install_prompt_available\",\n      });\n\n      // Show install banner after a delay\n      setTimeout(() => {\n        this.showInstallBanner();\n      }, 2000);\n    });\n\n    // Listen for app installed\n    window.addEventListener(\"appinstalled\", () => {\n      // ('📱 PWA installed successfully');\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: \"pwa_installed\",\n      });\n\n      this.hideInstallBanner();\n    });\n  }\n\n  /**\n   * Show PWA install banner\n   */\n  showInstallBanner() {\n    if (!this.isInstallable) {\n      return;\n    }\n\n    const banner = document.createElement(\"div\");\n    banner.id = \"install-banner\";\n    banner.className = \"install-banner\";\n\n    // Create banner content manually to avoid HTML sanitization issues\n    const bannerContent = document.createElement(\"div\");\n    bannerContent.className = \"banner-content\";\n\n    const bannerText = document.createElement(\"div\");\n    bannerText.className = \"banner-text\";\n\n    const title = document.createElement(\"strong\");\n    title.textContent = \"Install Stroke Triage Assistant\";\n\n    const description = document.createElement(\"p\");\n    description.textContent = \"Get offline access and faster performance\";\n\n    bannerText.appendChild(title);\n    bannerText.appendChild(description);\n\n    const bannerActions = document.createElement(\"div\");\n    bannerActions.className = \"banner-actions\";\n\n    const installButton = document.createElement(\"button\");\n    installButton.className = \"install-button\";\n    installButton.textContent = \"Install\";\n    installButton.addEventListener(\"click\", () => {\n      this.promptInstall();\n    });\n\n    const dismissButton = document.createElement(\"button\");\n    dismissButton.className = \"dismiss-button\";\n    dismissButton.textContent = \"×\";\n    dismissButton.addEventListener(\"click\", () => {\n      this.hideInstallBanner();\n    });\n\n    bannerActions.appendChild(installButton);\n    bannerActions.appendChild(dismissButton);\n\n    bannerContent.appendChild(bannerText);\n    bannerContent.appendChild(bannerActions);\n    banner.appendChild(bannerContent);\n\n    document.body.appendChild(banner);\n  }\n\n  /**\n   * Hide install banner\n   */\n  hideInstallBanner() {\n    const banner = document.getElementById(\"install-banner\");\n    if (banner) {\n      banner.remove();\n    }\n  }\n\n  /**\n   * Prompt user to install PWA\n   */\n  async promptInstall() {\n    if (!this.installPromptEvent) {\n      return;\n    }\n\n    try {\n      const result = await this.installPromptEvent.prompt();\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: \"pwa_install_prompted\",\n        outcome: result.outcome,\n      });\n\n      // Clear the install prompt\n      this.installPromptEvent = null;\n      this.isInstallable = false;\n\n      // Hide banner\n      this.hideInstallBanner();\n    } catch (error) {\n      // ('Install prompt failed:', error);\n    }\n  }\n}\n\n// Export singleton instances\nexport const medicalSWManager = new MedicalServiceWorkerManager();\nexport const offlineInstallPrompt = new OfflineInstallPrompt(medicalSWManager);\n\n// Make available globally for inline event handlers\nwindow.medicalSWManager = medicalSWManager;\nwindow.offlineInstallPrompt = offlineInstallPrompt;\n","/**\n * Medical Data Synchronization Manager\n * iGFAP Stroke Triage Assistant - Phase 3 Advanced Features\n *\n * Provides real-time data synchronization with conflict resolution\n */\n\nimport { medicalEventObserver, MEDICAL_EVENTS } from \"../patterns/observer.js\";\nimport { medicalPerformanceMonitor, PerformanceMetricType } from \"../performance/medical-performance-monitor.js\";\nimport { patientDataCache, MedicalCacheTTL, CachePriority } from \"../performance/medical-cache.js\";\nimport { store } from \"../state/store.js\";\n\n// Bulletproof error handling utilities\nimport {\n  safeAsync,\n  MedicalError,\n  ERROR_CATEGORIES,\n  ERROR_SEVERITY,\n  MEDICAL_ERROR_CODES,\n} from \"../utils/error-handler.js\";\n\n/**\n * Sync operation types\n */\nexport const SyncOperationType = {\n  CREATE: \"create\",\n  UPDATE: \"update\",\n  DELETE: \"delete\",\n  CONFLICT_RESOLVE: \"conflict_resolve\",\n};\n\n/**\n * Sync status states\n */\nexport const SyncStatus = {\n  IDLE: \"idle\",\n  SYNCING: \"syncing\",\n  ERROR: \"error\",\n  CONFLICT: \"conflict\",\n  OFFLINE: \"offline\",\n};\n\n/**\n * Data conflict resolution strategies\n */\nexport const ConflictResolution = {\n  CLIENT_WINS: \"client_wins\",\n  SERVER_WINS: \"server_wins\",\n  MERGE: \"merge\",\n  MANUAL: \"manual\",\n};\n\n/**\n * Medical sync operation wrapper\n */\nclass MedicalSyncOperation {\n  constructor(type, entityType, entityId, data, timestamp = Date.now()) {\n    this.id = `sync_${timestamp}_${Math.random().toString(36).substr(2, 9)}`;\n    this.type = type;\n    this.entityType = entityType;\n    this.entityId = entityId;\n    this.data = data;\n    this.timestamp = timestamp;\n    this.attempts = 0;\n    this.maxAttempts = 3;\n    this.status = \"pending\";\n    this.error = null;\n  }\n\n  /**\n   * Check if operation should be retried\n   */\n  canRetry() {\n    return this.attempts < this.maxAttempts && this.status === \"error\";\n  }\n\n  /**\n   * Mark operation as failed\n   */\n  markFailed(error) {\n    this.status = \"error\";\n    this.error = error;\n    this.attempts += 1;\n  }\n\n  /**\n   * Mark operation as completed\n   */\n  markCompleted() {\n    this.status = \"completed\";\n    this.error = null;\n  }\n}\n\n/**\n * Medical Data Synchronization Manager\n */\nexport class MedicalSyncManager {\n  constructor() {\n    this.status = SyncStatus.IDLE;\n    this.pendingOperations = new Map();\n    this.conflictQueue = new Map();\n    this.syncInterval = null;\n    this.isOnline = navigator.onLine;\n    this.lastSyncTime = null;\n    this.syncInProgress = false;\n\n    // Configuration\n    this.config = {\n      syncIntervalMs: 30000, // 30 seconds\n      conflictRetentionMs: 24 * 60 * 60 * 1000, // 24 hours\n      maxPendingOperations: 100,\n      enableRealTimeSync: true,\n      enableConflictResolution: true,\n    };\n\n    this.setupEventListeners();\n  }\n\n  /**\n   * Initialize synchronization manager with bulletproof error handling\n   */\n  async initialize() {\n    return safeAsync(\n      async () => {\n        // ('🔄 Initializing Medical Sync Manager...');\n\n        // Load pending operations from storage with error handling\n        await safeAsync(\n          () => this.loadPendingOperations(),\n          (error) => {\n            console.warn(\"Failed to load pending operations, starting fresh:\", error.message);\n            this.pendingOperations.clear();\n          },\n          { operation: \"load_pending_operations\" },\n        );\n\n        // Start periodic sync if online\n        if (this.isOnline && this.config.enableRealTimeSync) {\n          await safeAsync(\n            () => this.startPeriodicSync(),\n            null,\n            { operation: \"start_periodic_sync\" },\n          );\n        }\n\n        // Perform initial sync with error handling\n        await safeAsync(\n          () => this.performSync(),\n          (error) => {\n            console.warn(\"Initial sync failed, will retry later:\", error.message);\n          },\n          { operation: \"initial_sync\" },\n        );\n\n        medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n          action: \"sync_manager_initialized\",\n          pendingOperations: this.pendingOperations.size,\n        });\n\n        // ('✅ Medical Sync Manager initialized');\n        return true;\n      },\n      (error) => {\n        console.error(\"Sync Manager initialization failed:\", error.message);\n\n        medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n          action: \"sync_manager_initialization_failed\",\n          error: error.message,\n        });\n\n        return false;\n      },\n      {\n        category: ERROR_CATEGORIES.STORAGE,\n        severity: ERROR_SEVERITY.MEDIUM,\n        timeout: 30000,\n        context: {\n          operation: \"sync_manager_initialization\",\n        },\n      },\n    );\n  }\n\n  /**\n   * Setup event listeners\n   */\n  setupEventListeners() {\n    // Online/offline status\n    window.addEventListener(\"online\", () => {\n      this.isOnline = true;\n      this.handleConnectionChange(true);\n    });\n\n    window.addEventListener(\"offline\", () => {\n      this.isOnline = false;\n      this.handleConnectionChange(false);\n    });\n\n    // Listen for data changes that need syncing\n    medicalEventObserver.subscribe(MEDICAL_EVENTS.PATIENT_DATA_UPDATED, (event) => {\n      this.queueDataSync(\"patient_data\", event.fieldName, event);\n    });\n\n    medicalEventObserver.subscribe(MEDICAL_EVENTS.PREDICTION_COMPLETED, (event) => {\n      this.queueDataSync(\"prediction_result\", event.module, event);\n    });\n\n    // Page visibility for sync optimization\n    document.addEventListener(\"visibilitychange\", () => {\n      if (!document.hidden && this.isOnline) {\n        this.performSync();\n      }\n    });\n  }\n\n  /**\n   * Handle connection status changes\n   */\n  async handleConnectionChange(isOnline) {\n    // (`🌐 Connection status changed: ${isOnline ? 'Online' : 'Offline'}`);\n\n    this.status = isOnline ? SyncStatus.IDLE : SyncStatus.OFFLINE;\n\n    if (isOnline) {\n      // Connection restored - start syncing\n      this.startPeriodicSync();\n      await this.performSync();\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: \"sync_connection_restored\",\n        pendingOperations: this.pendingOperations.size,\n      });\n    } else {\n      // Connection lost - stop periodic sync\n      this.stopPeriodicSync();\n\n      medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n        action: \"sync_connection_lost\",\n      });\n    }\n  }\n\n  /**\n   * Queue data for synchronization\n   */\n  queueDataSync(entityType, entityId, data) {\n    if (!this.config.enableRealTimeSync) {\n      return;\n    }\n\n    const operation = new MedicalSyncOperation(\n      SyncOperationType.UPDATE,\n      entityType,\n      entityId,\n      this.sanitizeDataForSync(data),\n    );\n\n    // Prevent queue overflow\n    if (this.pendingOperations.size >= this.config.maxPendingOperations) {\n      const oldestKey = this.pendingOperations.keys().next().value;\n      this.pendingOperations.delete(oldestKey);\n    }\n\n    this.pendingOperations.set(operation.id, operation);\n\n    // Save to persistent storage\n    this.savePendingOperations();\n\n    // Trigger immediate sync if online\n    if (this.isOnline && !this.syncInProgress) {\n      setTimeout(() => this.performSync(), 1000); // Small delay to batch operations\n    }\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: \"sync_operation_queued\",\n      entityType,\n      entityId,\n      operationId: operation.id,\n    });\n  }\n\n  /**\n   * Sanitize sensitive data before sync\n   */\n  sanitizeDataForSync(data) {\n    const sanitized = { ...data };\n\n    // Remove sensitive fields\n    const sensitiveFields = [\"ssn\", \"mrn\", \"patient_id\", \"user_id\", \"session_token\"];\n    sensitiveFields.forEach((field) => {\n      if (sanitized[field]) {\n        delete sanitized[field];\n      }\n    });\n\n    // Add sync metadata\n    sanitized._syncTimestamp = Date.now();\n    sanitized._syncId = `sync_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n    return sanitized;\n  }\n\n  /**\n   * Perform synchronization of pending operations with comprehensive error handling\n   */\n  async performSync() {\n    return safeAsync(\n      async () => {\n        if (!this.isOnline || this.syncInProgress || this.pendingOperations.size === 0) {\n          return {\n            skipped: true,\n            reason: !this.isOnline ? \"offline\" : this.syncInProgress ? \"already_syncing\" : \"no_operations\",\n          };\n        }\n\n        const metricId = medicalPerformanceMonitor.startMeasurement(\n          PerformanceMetricType.NETWORK,\n          \"medical_data_sync\",\n        );\n\n        this.syncInProgress = true;\n        this.status = SyncStatus.SYNCING;\n\n        // (`🔄 Starting sync of ${this.pendingOperations.size} operations...`);\n\n        let completedCount = 0;\n        let errorCount = 0;\n        let conflictCount = 0;\n        const startTime = Date.now();\n\n        try {\n          // Process operations in batches with timeout\n          const operations = Array.from(this.pendingOperations.values());\n          const batchSize = 5;\n          const maxSyncTime = 120000; // 2 minutes max sync time\n\n          for (let i = 0; i < operations.length; i += batchSize) {\n            // Check timeout\n            if (Date.now() - startTime > maxSyncTime) {\n              throw new MedicalError(\n                \"Sync operation timeout\",\n                \"SYNC_TIMEOUT\",\n                ERROR_CATEGORIES.NETWORK,\n                ERROR_SEVERITY.MEDIUM,\n              ).withContext({ processedBatches: Math.floor(i / batchSize), totalBatches: Math.ceil(operations.length / batchSize) });\n            }\n\n            const batch = operations.slice(i, i + batchSize);\n            const results = await safeAsync(\n              () => this.processSyncBatch(batch),\n              (error) => {\n                console.warn(`Batch ${Math.floor(i / batchSize)} sync failed:`, error.message);\n                return batch.map((op) => ({\n                  operationId: op.id,\n                  status: \"error\",\n                  error: error.message,\n                }));\n              },\n              {\n                operation: \"process_sync_batch\",\n                batchIndex: Math.floor(i / batchSize),\n                timeout: 30000,\n              },\n            );\n\n            results.forEach((result) => {\n              if (result.status === \"completed\") {\n                completedCount++;\n                this.pendingOperations.delete(result.operationId);\n              } else if (result.status === \"conflict\") {\n                conflictCount++;\n                safeAsync(\n                  () => this.handleSyncConflict(result),\n                  null,\n                  { operation: \"handle_sync_conflict\" },\n                );\n              } else {\n                errorCount++;\n              }\n            });\n          }\n\n          this.lastSyncTime = Date.now();\n\n          // Save updated pending operations with error handling\n          await safeAsync(\n            () => this.savePendingOperations(),\n            (error) => {\n              console.warn(\"Failed to save pending operations after sync:\", error.message);\n            },\n            { operation: \"save_pending_operations_after_sync\" },\n          );\n\n          // (`✅ Sync completed: ${completedCount} success, ${errorCount} errors, ${conflictCount} conflicts`);\n\n          medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n            action: \"sync_completed\",\n            completedCount,\n            errorCount,\n            conflictCount,\n            duration: Date.now() - startTime,\n          });\n\n          medicalPerformanceMonitor.endMeasurement(metricId, {\n            success: true,\n            operationsProcessed: completedCount + errorCount + conflictCount,\n          });\n\n          return {\n            success: true,\n            completedCount,\n            errorCount,\n            conflictCount,\n            duration: Date.now() - startTime,\n          };\n        } catch (error) {\n          medicalPerformanceMonitor.endMeasurement(metricId, {\n            success: false,\n            error: error.message,\n          });\n\n          this.status = SyncStatus.ERROR;\n          throw error;\n        } finally {\n          this.syncInProgress = false;\n          this.status = this.pendingOperations.size > 0 ? SyncStatus.IDLE : SyncStatus.IDLE;\n        }\n      },\n      (error) => {\n        console.error(\"Sync operation failed:\", error.message);\n\n        medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n          action: \"sync_failed\",\n          error: error.message,\n          pendingOperations: this.pendingOperations.size,\n        });\n\n        this.status = SyncStatus.ERROR;\n\n        return {\n          success: false,\n          error: error.message,\n        };\n      },\n      {\n        category: ERROR_CATEGORIES.NETWORK,\n        severity: ERROR_SEVERITY.MEDIUM,\n        timeout: 150000, // 2.5 minutes\n        context: {\n          operation: \"perform_sync\",\n          pendingOperations: this.pendingOperations.size,\n        },\n      },\n    );\n  }\n\n  /**\n   * Process a batch of sync operations\n   */\n  async processSyncBatch(operations) {\n    const results = [];\n\n    // Simulate sync operations (in real implementation, these would be API calls)\n    for (const operation of operations) {\n      try {\n        const result = await this.executeSyncOperation(operation);\n        results.push({\n          operationId: operation.id,\n          status: \"completed\",\n          result,\n        });\n\n        operation.markCompleted();\n      } catch (error) {\n        if (error.name === \"ConflictError\") {\n          results.push({\n            operationId: operation.id,\n            status: \"conflict\",\n            conflict: error.conflict,\n            operation,\n          });\n        } else {\n          operation.markFailed(error.message);\n\n          if (operation.canRetry()) {\n            // (`⚠️ Operation ${operation.id} failed, will retry: ${error.message}`);\n          } else {\n            // (`❌ Operation ${operation.id} failed permanently: ${error.message}`);\n            this.pendingOperations.delete(operation.id);\n          }\n\n          results.push({\n            operationId: operation.id,\n            status: \"error\",\n            error: error.message,\n          });\n        }\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Execute a single sync operation\n   */\n  async executeSyncOperation(operation) {\n    // Simulate API call with realistic delay and error handling\n    await new Promise((resolve) => setTimeout(resolve, 100 + Math.random() * 200));\n\n    // Simulate conflict detection (5% chance)\n    if (Math.random() < 0.05) {\n      const conflict = {\n        clientData: operation.data,\n        serverData: { ...operation.data, _serverModified: true },\n        conflictFields: [\"timestamp\", \"value\"],\n        resolution: ConflictResolution.MANUAL,\n      };\n\n      const error = new Error(\"Data conflict detected\");\n      error.name = \"ConflictError\";\n      error.conflict = conflict;\n      throw error;\n    }\n\n    // Simulate network error (2% chance)\n    if (Math.random() < 0.02) {\n      throw new Error(\"Network request failed\");\n    }\n\n    // Successful sync\n    return {\n      entityType: operation.entityType,\n      entityId: operation.entityId,\n      syncTimestamp: Date.now(),\n      serverVersion: Date.now(),\n    };\n  }\n\n  /**\n   * Handle sync conflicts\n   */\n  handleSyncConflict(conflictResult) {\n    const { operation, conflict } = conflictResult;\n\n    // Store conflict for manual resolution\n    this.conflictQueue.set(operation.id, {\n      operation,\n      conflict,\n      timestamp: Date.now(),\n    });\n\n    this.status = SyncStatus.CONFLICT;\n\n    // Apply automatic resolution if configured\n    if (this.config.enableConflictResolution) {\n      this.resolveConflictAutomatically(operation.id, conflict);\n    }\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: \"sync_conflict_detected\",\n      operationId: operation.id,\n      entityType: operation.entityType,\n      conflictFields: conflict.conflictFields,\n    });\n  }\n\n  /**\n   * Resolve conflicts automatically based on strategy\n   */\n  async resolveConflictAutomatically(conflictId, conflict) {\n    let resolvedData;\n\n    switch (conflict.resolution) {\n    case ConflictResolution.CLIENT_WINS:\n      resolvedData = conflict.clientData;\n      break;\n\n    case ConflictResolution.SERVER_WINS:\n      resolvedData = conflict.serverData;\n      break;\n\n    case ConflictResolution.MERGE:\n      resolvedData = this.mergeConflictData(conflict.clientData, conflict.serverData);\n      break;\n\n    default:\n      // Manual resolution required\n      return;\n    }\n\n    // Create resolution operation\n    const resolutionOperation = new MedicalSyncOperation(\n      SyncOperationType.CONFLICT_RESOLVE,\n      \"conflict_resolution\",\n      conflictId,\n      resolvedData,\n    );\n\n    this.pendingOperations.set(resolutionOperation.id, resolutionOperation);\n    this.conflictQueue.delete(conflictId);\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: \"sync_conflict_auto_resolved\",\n      conflictId,\n      resolution: conflict.resolution,\n    });\n  }\n\n  /**\n   * Merge conflicting data intelligently\n   */\n  mergeConflictData(clientData, serverData) {\n    const merged = { ...serverData };\n\n    // Prefer client data for user-entered fields\n    const clientPreferredFields = [\"gfap_value\", \"age_years\", \"systolic_bp\", \"diastolic_bp\"];\n    clientPreferredFields.forEach((field) => {\n      if (clientData[field] !== undefined) {\n        merged[field] = clientData[field];\n      }\n    });\n\n    // Use latest timestamp\n    merged._mergedAt = Date.now();\n    merged._mergeStrategy = \"intelligent_merge\";\n\n    return merged;\n  }\n\n  /**\n   * Start periodic synchronization\n   */\n  startPeriodicSync() {\n    if (this.syncInterval) {\n      return;\n    }\n\n    this.syncInterval = setInterval(() => {\n      if (this.isOnline && this.pendingOperations.size > 0) {\n        this.performSync();\n      }\n    }, this.config.syncIntervalMs);\n\n    // (`🔄 Periodic sync started (${this.config.syncIntervalMs}ms interval)`);\n  }\n\n  /**\n   * Stop periodic synchronization\n   */\n  stopPeriodicSync() {\n    if (this.syncInterval) {\n      clearInterval(this.syncInterval);\n      this.syncInterval = null;\n      // ('⏹️ Periodic sync stopped');\n    }\n  }\n\n  /**\n   * Force immediate synchronization\n   */\n  async forcSync() {\n    if (!this.isOnline) {\n      throw new Error(\"Cannot sync while offline\");\n    }\n\n    this.stopPeriodicSync();\n    await this.performSync();\n    this.startPeriodicSync();\n  }\n\n  /**\n   * Get synchronization status\n   */\n  getSyncStatus() {\n    return {\n      status: this.status,\n      isOnline: this.isOnline,\n      pendingOperations: this.pendingOperations.size,\n      conflicts: this.conflictQueue.size,\n      lastSyncTime: this.lastSyncTime,\n      syncInProgress: this.syncInProgress,\n    };\n  }\n\n  /**\n   * Load pending operations from storage with comprehensive error handling\n   */\n  async loadPendingOperations() {\n    return safeAsync(\n      async () => {\n        if (typeof localStorage === \"undefined\") {\n          throw new MedicalError(\n            \"Local storage not available\",\n            \"STORAGE_UNAVAILABLE\",\n            ERROR_CATEGORIES.STORAGE,\n            ERROR_SEVERITY.MEDIUM,\n          );\n        }\n\n        const stored = localStorage.getItem(\"medical_sync_pending\");\n        if (!stored) {\n          // ('No pending sync operations found');\n          return { loaded: 0 };\n        }\n\n        let operations;\n        try {\n          operations = JSON.parse(stored);\n        } catch (parseError) {\n          throw new MedicalError(\n            \"Failed to parse stored sync operations\",\n            \"PARSE_ERROR\",\n            ERROR_CATEGORIES.STORAGE,\n            ERROR_SEVERITY.MEDIUM,\n          ).withContext({ parseError: parseError.message });\n        }\n\n        if (!Array.isArray(operations)) {\n          throw new MedicalError(\n            \"Invalid stored operations format\",\n            \"INVALID_FORMAT\",\n            ERROR_CATEGORIES.STORAGE,\n            ERROR_SEVERITY.MEDIUM,\n          ).withContext({ type: typeof operations });\n        }\n\n        let loadedCount = 0;\n        let errorCount = 0;\n\n        operations.forEach((op, index) => {\n          try {\n            // Validate operation structure\n            if (!op || typeof op !== \"object\" || !op.type || !op.entityType || !op.entityId) {\n              throw new Error(`Invalid operation structure at index ${index}`);\n            }\n\n            const operation = new MedicalSyncOperation(op.type, op.entityType, op.entityId, op.data, op.timestamp);\n            operation.attempts = Math.max(0, op.attempts || 0);\n            operation.status = op.status || \"pending\";\n\n            // Skip operations that have exceeded max attempts\n            if (operation.attempts >= operation.maxAttempts) {\n              console.warn(`Skipping operation ${operation.id} - exceeded max attempts`);\n              return;\n            }\n\n            this.pendingOperations.set(operation.id, operation);\n            loadedCount++;\n          } catch (opError) {\n            console.warn(`Failed to load operation at index ${index}:`, opError.message);\n            errorCount++;\n          }\n        });\n\n        // (`📦 Loaded ${loadedCount} pending sync operations (${errorCount} errors)`);\n\n        return { loaded: loadedCount, errors: errorCount };\n      },\n      (error) => {\n        console.warn(\"Failed to load pending operations:\", error.message);\n\n        // Clear corrupted data\n        try {\n          localStorage.removeItem(\"medical_sync_pending\");\n        } catch (clearError) {\n          console.error(\"Failed to clear corrupted sync data:\", clearError.message);\n        }\n\n        return { loaded: 0, errors: 1, cleared: true };\n      },\n      {\n        category: ERROR_CATEGORIES.STORAGE,\n        severity: ERROR_SEVERITY.LOW,\n        timeout: 5000,\n        context: {\n          operation: \"load_pending_operations\",\n        },\n      },\n    );\n  }\n\n  /**\n   * Save pending operations to storage with comprehensive error handling\n   */\n  async savePendingOperations() {\n    return safeAsync(\n      async () => {\n        if (typeof localStorage === \"undefined\") {\n          throw new MedicalError(\n            \"Local storage not available\",\n            \"STORAGE_UNAVAILABLE\",\n            ERROR_CATEGORIES.STORAGE,\n            ERROR_SEVERITY.MEDIUM,\n          );\n        }\n\n        const operations = Array.from(this.pendingOperations.values()).map((op) => {\n          try {\n            return {\n              id: op.id,\n              type: op.type,\n              entityType: op.entityType,\n              entityId: op.entityId,\n              data: op.data,\n              timestamp: op.timestamp,\n              attempts: op.attempts,\n              status: op.status,\n            };\n          } catch (serializeError) {\n            console.warn(`Failed to serialize operation ${op.id}:`, serializeError.message);\n            return null;\n          }\n        }).filter((op) => op !== null);\n\n        const serialized = JSON.stringify(operations);\n\n        // Check storage quota\n        if (serialized.length > 1024 * 1024) { // 1MB limit\n          console.warn(\"Sync operations data is very large, may hit storage limits\");\n        }\n\n        localStorage.setItem(\"medical_sync_pending\", serialized);\n\n        return { saved: operations.length };\n      },\n      (error) => {\n        console.error(\"Failed to save pending operations:\", error.message);\n\n        // Try to clear space and retry once\n        if (error.name === \"QuotaExceededError\") {\n          try {\n            // Remove oldest operations to make space\n            const operationsArray = Array.from(this.pendingOperations.entries());\n            const halfPoint = Math.floor(operationsArray.length / 2);\n            const toKeep = operationsArray.slice(-halfPoint);\n\n            this.pendingOperations.clear();\n            toKeep.forEach(([id, op]) => {\n              this.pendingOperations.set(id, op);\n            });\n\n            console.info(`Reduced operations from ${operationsArray.length} to ${toKeep.length} due to storage quota`);\n\n            // Retry save\n            const reducedOperations = toKeep.map(([, op]) => ({\n              id: op.id,\n              type: op.type,\n              entityType: op.entityType,\n              entityId: op.entityId,\n              data: op.data,\n              timestamp: op.timestamp,\n              attempts: op.attempts,\n              status: op.status,\n            }));\n\n            localStorage.setItem(\"medical_sync_pending\", JSON.stringify(reducedOperations));\n            return { saved: reducedOperations.length, reduced: true };\n          } catch (retryError) {\n            console.error(\"Failed to save even after reducing operations:\", retryError.message);\n            return { saved: 0, error: retryError.message };\n          }\n        }\n\n        return { saved: 0, error: error.message };\n      },\n      {\n        category: ERROR_CATEGORIES.STORAGE,\n        severity: ERROR_SEVERITY.LOW,\n        timeout: 5000,\n        context: {\n          operation: \"save_pending_operations\",\n          operationCount: this.pendingOperations.size,\n        },\n      },\n    );\n  }\n\n  /**\n   * Clear all pending operations\n   */\n  clearPendingOperations() {\n    this.pendingOperations.clear();\n    this.conflictQueue.clear();\n    localStorage.removeItem(\"medical_sync_pending\");\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: \"sync_operations_cleared\",\n    });\n  }\n\n  /**\n   * Configure sync settings\n   */\n  updateConfig(newConfig) {\n    this.config = { ...this.config, ...newConfig };\n\n    // Restart periodic sync with new interval\n    if (this.syncInterval && newConfig.syncIntervalMs) {\n      this.stopPeriodicSync();\n      this.startPeriodicSync();\n    }\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: \"sync_config_updated\",\n      config: this.config,\n    });\n  }\n\n  /**\n   * Dispose and cleanup\n   */\n  dispose() {\n    this.stopPeriodicSync();\n    this.savePendingOperations();\n\n    medicalEventObserver.publish(MEDICAL_EVENTS.AUDIT_EVENT, {\n      action: \"sync_manager_disposed\",\n    });\n  }\n}\n\n// Export singleton instance\nexport const medicalSyncManager = new MedicalSyncManager();\n","/**\n * Medical Service Worker for Offline-First Stroke Triage Assistant\n * iGFAP Stroke Triage Assistant - Phase 3 Advanced Features\n *\n * Provides intelligent offline capabilities for critical medical operations with bulletproof error handling\n */\n\n// Bulletproof error handling for service worker\nconst ERROR_CATEGORIES = {\n  CACHE: \"cache\",\n  NETWORK: \"network\",\n  MEDICAL: \"medical\",\n  STORAGE: \"storage\",\n};\n\nconst ERROR_SEVERITY = {\n  LOW: \"low\",\n  MEDIUM: \"medium\",\n  HIGH: \"high\",\n  CRITICAL: \"critical\",\n};\n\n/**\n * Safe async wrapper for service worker operations\n */\nasync function safeAsync(operation, fallback = null, context = {}) {\n  try {\n    return await operation();\n  } catch (error) {\n    console.error(\"Service Worker error:\", error.message, context);\n\n    // Send error to main thread\n    try {\n      const clients = await self.clients.matchAll();\n      clients.forEach(client => {\n        client.postMessage({\n          type: \"SW_ERROR\",\n          error: {\n            message: error.message,\n            context,\n            timestamp: new Date().toISOString(),\n          },\n        });\n      });\n    } catch (msgError) {\n      console.error(\"Failed to send error message to clients:\", msgError);\n    }\n\n    return typeof fallback === \"function\" ? fallback(error) : fallback;\n  }\n}\n\nconst CACHE_VERSION = \"medical-app-v3.0.0\";\nconst STATIC_CACHE_NAME = `${CACHE_VERSION}-static`;\nconst API_CACHE_NAME = `${CACHE_VERSION}-api`;\nconst RUNTIME_CACHE_NAME = `${CACHE_VERSION}-runtime`;\n\n// Critical resources that must be available offline\nconst CRITICAL_RESOURCES = [\n  \"/0925/\",\n  \"/0925/index.html\",\n  \"/0925/src/main.js\",\n  \"/0925/src/app.js\",\n  \"/0925/src/config.js\",\n  \"/0925/src/state/store.js\",\n  \"/0925/src/logic/validate.js\",\n  \"/0925/src/logic/ich-volume-calculator.js\",\n  \"/0925/src/logic/lvo-local-model.js\",\n  \"/0925/src/ui/render.js\",\n  \"/0925/src/styles/app.css\",\n  \"/0925/manifest.json\",\n  \"/0925/icon-192.png\",\n  \"/0925/icon-512.png\",\n];\n\n// API endpoints for intelligent caching\nconst API_ENDPOINTS = [\n  \"https://europe-west3-igfap-452720.cloudfunctions.net/predict_coma_ich\",\n  \"https://europe-west3-igfap-452720.cloudfunctions.net/predict_limited_data_ich\",\n  \"https://europe-west3-igfap-452720.cloudfunctions.net/predict_full_stroke\",\n];\n\n// Network strategies\nconst NETWORK_STRATEGIES = {\n  CACHE_FIRST: \"cache-first\",\n  NETWORK_FIRST: \"network-first\",\n  NETWORK_ONLY: \"network-only\",\n  CACHE_ONLY: \"cache-only\",\n  STALE_WHILE_REVALIDATE: \"stale-while-revalidate\",\n};\n\n/**\n * Service Worker Installation with bulletproof error handling\n */\nself.addEventListener(\"install\", event => {\n  // Medical Service Worker installing\n\n  event.waitUntil(\n    safeAsync(\n      async () => {\n        // Pre-cache critical resources with individual error handling\n        const staticCache = await caches.open(STATIC_CACHE_NAME);\n\n        // Cache resources individually to prevent single failure from blocking entire installation\n        const cacheResults = await Promise.allSettled(\n          CRITICAL_RESOURCES.map(async resource => {\n            try {\n              const response = await fetch(resource);\n              if (response.ok) {\n                return staticCache.put(resource, response);\n              }\n              throw new Error(`Failed to fetch ${resource}: ${response.status}`);\n            } catch (fetchError) {\n              console.warn(`Failed to cache critical resource ${resource}:`, fetchError.message);\n              return null;\n            }\n          })\n        );\n\n        const successfulCaches = cacheResults.filter(\n          result => result.status === \"fulfilled\"\n        ).length;\n        const failedCaches = CRITICAL_RESOURCES.length - successfulCaches;\n\n        if (failedCaches > CRITICAL_RESOURCES.length / 2) {\n          throw new Error(\n            `Too many critical resources failed to cache: ${failedCaches}/${CRITICAL_RESOURCES.length}`\n          );\n        }\n\n        // Initialize API and runtime caches\n        await Promise.allSettled([caches.open(API_CACHE_NAME), caches.open(RUNTIME_CACHE_NAME)]);\n\n        // Medical Service Worker installed successfully\n\n        // Send installation success message\n        try {\n          const clients = await self.clients.matchAll();\n          clients.forEach(client => {\n            client.postMessage({\n              type: \"SW_INSTALLED\",\n              cacheVersion: CACHE_VERSION,\n              criticalResourcesCount: CRITICAL_RESOURCES.length,\n              successfulCaches,\n              failedCaches,\n              timestamp: new Date().toISOString(),\n            });\n          });\n        } catch (msgError) {\n          console.warn(\"Failed to send installation message:\", msgError.message);\n        }\n\n        // Skip waiting to activate immediately\n        self.skipWaiting();\n\n        return { success: true, successfulCaches, failedCaches };\n      },\n      error => {\n        // Fallback for installation failure\n        console.error(\"Service Worker installation failed:\", error.message);\n\n        try {\n          const clients = self.clients.matchAll();\n          clients.then(clientList => {\n            clientList.forEach(client => {\n              client.postMessage({\n                type: \"SW_INSTALL_ERROR\",\n                error: error.message,\n                timestamp: new Date().toISOString(),\n              });\n            });\n          });\n        } catch (msgError) {\n          console.error(\"Failed to send installation error message:\", msgError.message);\n        }\n\n        return { success: false, error: error.message };\n      },\n      {\n        operation: \"service_worker_installation\",\n        criticalResourcesCount: CRITICAL_RESOURCES.length,\n      }\n    )\n  );\n});\n\n/**\n * Service Worker Activation with bulletproof error handling\n */\nself.addEventListener(\"activate\", event => {\n  // Medical Service Worker activating\n\n  event.waitUntil(\n    safeAsync(\n      async () => {\n        // Clean up old caches with individual error handling\n        const cacheNames = await caches.keys();\n        const oldCaches = cacheNames.filter(\n          name => name.startsWith(\"medical-app-v\") && !name.includes(CACHE_VERSION)\n        );\n\n        const cleanupResults = await Promise.allSettled(\n          oldCaches.map(async cacheName => {\n            try {\n              const deleted = await caches.delete(cacheName);\n              return { cacheName, deleted };\n            } catch (error) {\n              console.warn(`Failed to delete cache ${cacheName}:`, error.message);\n              return { cacheName, deleted: false, error: error.message };\n            }\n          })\n        );\n\n        const successfulCleanups = cleanupResults.filter(\n          result => result.status === \"fulfilled\" && result.value.deleted\n        ).length;\n\n        // Cleaned up old caches\n\n        // Claim all clients with timeout\n        await Promise.race([\n          self.clients.claim(),\n          new Promise((_, reject) =>\n            setTimeout(() => reject(new Error(\"Client claim timeout\")), 5000)\n          ),\n        ]);\n\n        // Medical Service Worker activated\n\n        // Notify clients of activation\n        const clients = await self.clients.matchAll();\n        const notificationPromises = clients.map(client => {\n          try {\n            return client.postMessage({\n              type: \"SW_ACTIVATED\",\n              cacheVersion: CACHE_VERSION,\n              cleanedCaches: successfulCleanups,\n              totalOldCaches: oldCaches.length,\n              timestamp: new Date().toISOString(),\n            });\n          } catch (error) {\n            console.warn(\"Failed to notify client of activation:\", error.message);\n            return null;\n          }\n        });\n\n        await Promise.allSettled(notificationPromises);\n\n        return { success: true, cleanedCaches: successfulCleanups };\n      },\n      error => {\n        console.error(\"Service Worker activation failed:\", error.message);\n\n        // Try to notify clients of activation failure\n        safeAsync(\n          async () => {\n            const clients = await self.clients.matchAll();\n            clients.forEach(client => {\n              client.postMessage({\n                type: \"SW_ACTIVATION_ERROR\",\n                error: error.message,\n                timestamp: new Date().toISOString(),\n              });\n            });\n          },\n          null,\n          { operation: \"activation_error_notification\" }\n        );\n\n        return { success: false, error: error.message };\n      },\n      {\n        operation: \"service_worker_activation\",\n      }\n    )\n  );\n});\n\n/**\n * Fetch Event Handler with Intelligent Caching\n */\nself.addEventListener(\"fetch\", event => {\n  const { request } = event;\n  const url = new URL(request.url);\n\n  // Skip non-GET requests for caching\n  if (request.method !== \"GET\") {\n    if (isAPIRequest(url)) {\n      // Handle API POST requests with intelligent offline behavior\n      event.respondWith(handleAPIRequest(request));\n    }\n    return;\n  }\n\n  // Route requests based on type\n  if (isAPIRequest(url)) {\n    event.respondWith(handleAPIRequest(request));\n  } else if (isStaticResource(url)) {\n    event.respondWith(handleStaticResource(request));\n  } else if (isAppShell(url)) {\n    event.respondWith(handleAppShell(request));\n  } else {\n    event.respondWith(handleRuntimeRequest(request));\n  }\n});\n\n/**\n * Handle API requests with medical data caching and bulletproof error handling\n */\nasync function handleAPIRequest(request) {\n  return safeAsync(\n    async () => {\n      const url = new URL(request.url);\n\n      // For POST requests (predictions), try network first with offline fallback\n      if (request.method === \"POST\") {\n        return await handlePredictionRequest(request);\n      }\n\n      // For GET requests, use stale-while-revalidate\n      const cache = await caches.open(API_CACHE_NAME);\n      const cachedResponse = await cache.match(request);\n\n      // If we have a cached response, return it while updating in background\n      if (cachedResponse) {\n        // Update cache in background with error handling\n        safeAsync(\n          async () => {\n            const response = await fetch(request);\n            if (response.ok) {\n              await cache.put(request, response.clone());\n            }\n          },\n          null,\n          { operation: \"background_cache_update\", url: request.url }\n        );\n\n        return cachedResponse;\n      }\n\n      // No cache, try network with timeout\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000);\n\n      try {\n        const networkResponse = await fetch(request, {\n          signal: controller.signal,\n        });\n        clearTimeout(timeoutId);\n\n        if (networkResponse.ok) {\n          // Cache response with error handling\n          try {\n            await cache.put(request, networkResponse.clone());\n          } catch (cacheError) {\n            console.warn(\"Failed to cache API response:\", cacheError.message);\n          }\n        }\n\n        return networkResponse;\n      } catch (fetchError) {\n        clearTimeout(timeoutId);\n        throw fetchError;\n      }\n    },\n    error => {\n      console.warn(\"API request failed, returning offline fallback:\", error.message);\n      return createOfflineFallbackResponse(request);\n    },\n    {\n      operation: \"api_request_handling\",\n      url: request.url,\n      method: request.method,\n    }\n  );\n}\n\n/**\n * Handle prediction API requests with intelligent offline support and bulletproof error handling\n */\nasync function handlePredictionRequest(request) {\n  return safeAsync(\n    async () => {\n      // Clone request for potential retry\n      const requestClone = request.clone();\n\n      // Try network first (critical for real-time predictions)\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10s timeout\n\n      try {\n        const networkResponse = await fetch(request, {\n          signal: controller.signal,\n        });\n\n        clearTimeout(timeoutId);\n\n        if (networkResponse.ok) {\n          // Cache successful prediction for offline reference with error handling\n          safeAsync(\n            async () => {\n              const cache = await caches.open(API_CACHE_NAME);\n              const cacheKey = await createPredictionCacheKey(requestClone);\n\n              // Store with timestamp for freshness checking\n              const responseWithMetadata = await addCacheMetadata(networkResponse.clone());\n              await cache.put(cacheKey, responseWithMetadata);\n            },\n            null,\n            { operation: \"prediction_cache_storage\", url: request.url }\n          );\n\n          return networkResponse;\n        }\n\n        throw new Error(`API returned ${networkResponse.status}: ${networkResponse.statusText}`);\n      } catch (fetchError) {\n        clearTimeout(timeoutId);\n        throw fetchError;\n      }\n    },\n    async error => {\n      console.warn(\"Network prediction failed, trying offline alternatives:\", error.message);\n\n      // Try local LVO model if available\n      const localPrediction = await safeAsync(() => tryLocalPrediction(request), null, {\n        operation: \"local_prediction_attempt\",\n      });\n\n      if (localPrediction) {\n        return localPrediction;\n      }\n\n      // Return cached similar prediction if available\n      const cachedPrediction = await safeAsync(() => findSimilarCachedPrediction(request), null, {\n        operation: \"cached_prediction_lookup\",\n      });\n\n      if (cachedPrediction) {\n        return cachedPrediction;\n      }\n\n      // Return offline guidance response\n      return createOfflinePredictionGuidance();\n    },\n    {\n      operation: \"prediction_request_handling\",\n      url: request.url,\n    }\n  );\n}\n\n/**\n * Try local LVO prediction model when offline with comprehensive error handling\n */\nasync function tryLocalPrediction(request) {\n  return safeAsync(\n    async () => {\n      // Safe request body parsing\n      let data;\n      try {\n        const body = await request.text();\n        data = JSON.parse(body);\n      } catch (parseError) {\n        throw new Error(`Failed to parse request body: ${parseError.message}`);\n      }\n\n      // Validate required data\n      if (!data || typeof data !== \"object\") {\n        throw new Error(\"Invalid request data format\");\n      }\n\n      // Check if we can use local LVO model\n      if (request.url.includes(\"predict_full_stroke\")) {\n        // Validate required fields\n        if (!data.gfap_value || !data.fast_ed_score) {\n          throw new Error(\"Missing required fields for local LVO prediction\");\n        }\n\n        // Validate field ranges\n        if (data.gfap_value < 0 || data.gfap_value > 10000) {\n          throw new Error(\"GFAP value out of valid range\");\n        }\n\n        if (data.fast_ed_score < 0 || data.fast_ed_score > 10) {\n          throw new Error(\"FAST-ED score out of valid range\");\n        }\n\n        // Calculate local prediction with error handling\n        const localResult = calculateLocalLVO(data.gfap_value, data.fast_ed_score);\n\n        if (!localResult || typeof localResult !== \"object\") {\n          throw new Error(\"Local LVO calculation failed\");\n        }\n\n        return new Response(\n          JSON.stringify({\n            ...localResult,\n            source: \"local_model\",\n            offline: true,\n            timestamp: new Date().toISOString(),\n            warning:\n              \"This is an offline prediction using a simplified model. Seek professional medical advice.\",\n          }),\n          {\n            status: 200,\n            headers: { \"Content-Type\": \"application/json\" },\n          }\n        );\n      }\n\n      return null;\n    },\n    error => {\n      console.warn(\"Local prediction failed:\", error.message);\n      return null;\n    },\n    {\n      operation: \"local_prediction\",\n      url: request.url,\n    }\n  );\n}\n\n/**\n * Simplified local LVO calculation with safety checks\n */\nfunction calculateLocalLVO(gfap, fastEd) {\n  try {\n    // Input validation\n    if (typeof gfap !== \"number\" || typeof fastEd !== \"number\") {\n      throw new Error(\"GFAP and FAST-ED values must be numbers\");\n    }\n\n    if (!isFinite(gfap) || !isFinite(fastEd)) {\n      throw new Error(\"GFAP and FAST-ED values must be finite numbers\");\n    }\n\n    if (gfap < 0 || fastEd < 0) {\n      throw new Error(\"GFAP and FAST-ED values cannot be negative\");\n    }\n\n    // Simplified logic - in practice, this would use the full model\n    const gfapScore = gfap > 500 ? 0.4 : gfap > 200 ? 0.2 : 0.1;\n    const fastEdScore = fastEd >= 4 ? 0.5 : fastEd >= 2 ? 0.3 : 0.1;\n\n    const lvoProb = Math.min(0.95, gfapScore + fastEdScore);\n    const ichProb = Math.max(0.05, Math.min(0.5, gfap / 2000)); // Very conservative ICH estimate\n\n    // Validate calculated probabilities\n    if (\n      !isFinite(lvoProb) ||\n      !isFinite(ichProb) ||\n      lvoProb < 0 ||\n      lvoProb > 1 ||\n      ichProb < 0 ||\n      ichProb > 1\n    ) {\n      throw new Error(\"Calculated probabilities are invalid\");\n    }\n\n    return {\n      lvo: {\n        probability: Math.round(lvoProb * 100) / 100, // Round to 2 decimal places\n        confidence: 0.6, // Lower confidence for offline model\n        module: \"Local Offline Model\",\n        warning: \"Simplified offline calculation - not for clinical decisions\",\n      },\n      ich: {\n        probability: Math.round(ichProb * 100) / 100,\n        confidence: 0.4, // Very low confidence for ICH estimation\n        module: \"Local Offline Model\",\n        warning: \"Conservative estimate - seek immediate medical evaluation\",\n      },\n      metadata: {\n        calculatedAt: new Date().toISOString(),\n        inputs: { gfap, fastEd },\n        disclaimer:\n          \"This is a simplified offline model for emergency use only. Clinical judgment and professional medical evaluation are essential.\",\n      },\n    };\n  } catch (error) {\n    console.error(\"Local LVO calculation failed:\", error.message);\n\n    // Return safe fallback values\n    return {\n      lvo: {\n        probability: 0.1,\n        confidence: 0.1,\n        module: \"Emergency Fallback\",\n        error: \"Calculation failed - using minimum risk estimate\",\n      },\n      ich: {\n        probability: 0.1,\n        confidence: 0.1,\n        module: \"Emergency Fallback\",\n        error: \"Calculation failed - using minimum risk estimate\",\n      },\n      metadata: {\n        calculatedAt: new Date().toISOString(),\n        error: error.message,\n        disclaimer: \"Calculation failed. Immediate medical evaluation required.\",\n      },\n    };\n  }\n}\n\n/**\n * Handle static resources with cache-first strategy\n */\nasync function handleStaticResource(request) {\n  const cache = await caches.open(STATIC_CACHE_NAME);\n  const cachedResponse = await cache.match(request);\n\n  if (cachedResponse) {\n    return cachedResponse;\n  }\n\n  try {\n    const networkResponse = await fetch(request);\n\n    if (networkResponse.ok) {\n      cache.put(request, networkResponse.clone());\n    }\n\n    return networkResponse;\n  } catch (error) {\n    // For critical resources, return a service unavailable response\n    return new Response(\"Service temporarily unavailable\", {\n      status: 503,\n      statusText: \"Service Unavailable\",\n    });\n  }\n}\n\n/**\n * Handle app shell with network-first, cache fallback\n */\nasync function handleAppShell(request) {\n  try {\n    const networkResponse = await fetch(request);\n\n    if (networkResponse.ok) {\n      const cache = await caches.open(RUNTIME_CACHE_NAME);\n      cache.put(request, networkResponse.clone());\n    }\n\n    return networkResponse;\n  } catch (error) {\n    const cache = await caches.open(STATIC_CACHE_NAME);\n    const cachedResponse = await cache.match(\"/0925/index.html\");\n\n    return (\n      cachedResponse ||\n      new Response(\"App temporarily unavailable\", {\n        status: 503,\n        statusText: \"Service Unavailable\",\n      })\n    );\n  }\n}\n\n/**\n * Handle runtime requests\n */\nasync function handleRuntimeRequest(request) {\n  const cache = await caches.open(RUNTIME_CACHE_NAME);\n\n  try {\n    const networkResponse = await fetch(request);\n\n    if (networkResponse.ok) {\n      cache.put(request, networkResponse.clone());\n    }\n\n    return networkResponse;\n  } catch (error) {\n    const cachedResponse = await cache.match(request);\n    return cachedResponse || fetch(request);\n  }\n}\n\n/**\n * Utility functions\n */\nfunction isAPIRequest(url) {\n  return API_ENDPOINTS.some(endpoint => url.href.startsWith(endpoint));\n}\n\nfunction isStaticResource(url) {\n  return (\n    url.pathname.includes(\"/src/\") ||\n    url.pathname.includes(\"/styles/\") ||\n    url.pathname.endsWith(\".css\") ||\n    url.pathname.endsWith(\".js\") ||\n    url.pathname.endsWith(\".png\") ||\n    url.pathname.endsWith(\".ico\")\n  );\n}\n\nfunction isAppShell(url) {\n  return (\n    url.pathname === \"/0925/\" || url.pathname === \"/0925/index.html\" || url.pathname.endsWith(\"/\")\n  );\n}\n\nasync function createPredictionCacheKey(request) {\n  const body = await request.text();\n  const hash = await crypto.subtle.digest(\"SHA-256\", new TextEncoder().encode(body));\n  const hashArray = Array.from(new Uint8Array(hash));\n  const hashHex = hashArray.map(b => b.toString(16).padStart(2, \"0\")).join(\"\");\n\n  return `${request.url}#${hashHex}`;\n}\n\nasync function addCacheMetadata(response) {\n  const data = await response.json();\n  const responseWithMetadata = {\n    ...data,\n    _cached: true,\n    _cachedAt: Date.now(),\n    _cacheVersion: CACHE_VERSION,\n  };\n\n  return new Response(JSON.stringify(responseWithMetadata), {\n    status: response.status,\n    statusText: response.statusText,\n    headers: response.headers,\n  });\n}\n\nasync function findSimilarCachedPrediction(request) {\n  // Implementation would find similar cached predictions\n  // This is a placeholder for more sophisticated matching\n  return null;\n}\n\nfunction createOfflineFallbackResponse(request) {\n  return new Response(\n    JSON.stringify({\n      error: \"Network unavailable\",\n      offline: true,\n      guidance:\n        \"Please check your network connection. For emergency situations, contact your local emergency services immediately.\",\n      timestamp: new Date().toISOString(),\n    }),\n    {\n      status: 503,\n      headers: { \"Content-Type\": \"application/json\" },\n    }\n  );\n}\n\nfunction createOfflinePredictionGuidance() {\n  return new Response(\n    JSON.stringify({\n      offline: true,\n      guidance: {\n        message:\n          \"Prediction services are currently unavailable. Please use clinical judgment and standard stroke protocols.\",\n        recommendations: [\n          \"Assess patient using standard NIHSS scoring\",\n          \"Consider time since symptom onset\",\n          \"Evaluate for contraindications to thrombolysis\",\n          \"Contact stroke team or neurologist if available\",\n          \"If in doubt, treat as potential stroke emergency\",\n        ],\n      },\n      emergency: \"For immediate emergency response, contact your local emergency services\",\n      timestamp: new Date().toISOString(),\n    }),\n    {\n      status: 200,\n      headers: { \"Content-Type\": \"application/json\" },\n    }\n  );\n}\n\n/**\n * Background Sync for Medical Data\n */\nself.addEventListener(\"sync\", event => {\n  if (event.tag === \"medical-data-sync\") {\n    event.waitUntil(syncMedicalData());\n  }\n});\n\nasync function syncMedicalData() {\n  // Syncing medical data\n\n  try {\n    // Sync any pending medical data when connection is restored\n    // This would include patient data, predictions, etc.\n\n    // Notify clients of successful sync\n    const clients = await self.clients.matchAll();\n    clients.forEach(client => {\n      client.postMessage({\n        type: \"MEDICAL_DATA_SYNCED\",\n        timestamp: new Date().toISOString(),\n      });\n    });\n  } catch (error) {\n    // Medical data sync failed\n  }\n}\n\n/**\n * Push Notifications for Medical Alerts\n */\nself.addEventListener(\"push\", event => {\n  if (event.data) {\n    const data = event.data.json();\n\n    if (data.type === \"medical-alert\") {\n      event.waitUntil(showMedicalNotification(data));\n    }\n  }\n});\n\nasync function showMedicalNotification(data) {\n  const options = {\n    body: data.message,\n    icon: \"/0925/icon-192.png\",\n    badge: \"/0925/icon-192.png\",\n    vibrate: [200, 100, 200],\n    requireInteraction: true,\n    actions: [\n      {\n        action: \"view\",\n        title: \"View Details\",\n      },\n      {\n        action: \"dismiss\",\n        title: \"Dismiss\",\n      },\n    ],\n  };\n\n  await self.registration.showNotification(data.title, options);\n}\n\n/**\n * Notification Click Handler\n */\nself.addEventListener(\"notificationclick\", event => {\n  event.notification.close();\n\n  if (event.action === \"view\") {\n    event.waitUntil(self.clients.openWindow(\"/0925/\"));\n  }\n});\n\n/**\n * Message Handler for Communication with Main Thread\n */\nself.addEventListener(\"message\", event => {\n  const { type, data } = event.data;\n\n  switch (type) {\n  case \"SKIP_WAITING\":\n    self.skipWaiting();\n    break;\n\n  case \"GET_CACHE_STATUS\":\n    event.ports[0].postMessage(getCacheStatus());\n    break;\n\n  case \"CLEAR_CACHE\":\n    event.waitUntil(clearAllCaches());\n    break;\n\n  case \"PREFETCH_RESOURCES\":\n    event.waitUntil(prefetchResources(data.resources));\n    break;\n  }\n});\n\nasync function getCacheStatus() {\n  const caches = await self.caches.keys();\n  const status = {};\n\n  for (const cacheName of caches) {\n    const cache = await self.caches.open(cacheName);\n    const keys = await cache.keys();\n    status[cacheName] = keys.length;\n  }\n\n  return {\n    version: CACHE_VERSION,\n    caches: status,\n    timestamp: new Date().toISOString(),\n  };\n}\n\nasync function clearAllCaches() {\n  const cacheNames = await caches.keys();\n  await Promise.all(cacheNames.map(cacheName => caches.delete(cacheName)));\n\n  // All caches cleared\n}\n\nasync function prefetchResources(resources) {\n  const cache = await caches.open(RUNTIME_CACHE_NAME);\n\n  for (const resource of resources) {\n    try {\n      const response = await fetch(resource);\n      if (response.ok) {\n        await cache.put(resource, response);\n      }\n    } catch (error) {\n      // Failed to prefetch resource\n    }\n  }\n}\n\n// Medical Service Worker loaded\n"],"names":["ALLOWED_TAGS","ALLOWED_ATTRIBUTES","ALLOWED_STYLES","sanitizeHTML","html","options","containsXSSPatterns","doc","sanitizeNode","pattern","node","nodesToRemove","i","child","tagName","sanitizeAttributes","escapeTextContent","nodeToRemove","element","allowedAttrs","attrsToRemove","attr","attrName","isDataAttr","sanitizeStyleAttribute","escapeAttributeValue","styleValue","styles","sanitizedStyles","style","property","value","s","text","safeSetInnerHTML","sanitizedHTML","error","EnvironmentConfig","define_process_env_default","clientConfig","key","defaultValue","type","service","array","byte","issues","warnings","researchPassword","sessionSecret","safeKeys","safeConfig","environmentConfig","getResearchPassword","MedicalDataEncryption","medicalLogger","LOG_CATEGORIES","safeAsync","keyMaterial","ERROR_CATEGORIES","ERROR_SEVERITY","keyData","randomBytes","keyBytes","data","jsonString","dataBytes","iv","encryptedBuffer","encryptedArray","encryptedBase64","ivBase64","encryptedData","encryptedDataString","parseError","encryptedBytes","char","decryptedBuffer","decryptedString","decryptedData","useSessionStorage","storage","storageKey","legacyData","dataString","parsed","parsedData","medicalEncryption","secureRetrieve","secureRemove","MedicalServiceWorkerManager","MedicalError","metricId","medicalPerformanceMonitor","PerformanceMetricType","registrationPromise","_","reject","medicalEventObserver","MEDICAL_EVENTS","newWorker","event","isOnline","registration","notification","htmlError","fallbackError","updatePromise","timeoutPromise","retryDelay","resolve","channel","timeout","postError","resources","enabled","OfflineInstallPrompt","swManager","banner","bannerContent","bannerText","title","description","bannerActions","installButton","dismissButton","result","medicalSWManager","offlineInstallPrompt","SyncOperationType","SyncStatus","ConflictResolution","MedicalSyncOperation","entityType","entityId","timestamp","MedicalSyncManager","operation","oldestKey","sanitized","field","completedCount","errorCount","conflictCount","startTime","operations","batchSize","maxSyncTime","batch","op","results","conflict","conflictResult","conflictId","resolvedData","resolutionOperation","clientData","serverData","merged","stored","loadedCount","index","opError","clearError","serializeError","serialized","operationsArray","halfPoint","toKeep","id","reducedOperations","retryError","newConfig","medicalSyncManager","fallback","context","client","msgError","CACHE_VERSION","STATIC_CACHE_NAME","API_CACHE_NAME","RUNTIME_CACHE_NAME","CRITICAL_RESOURCES","API_ENDPOINTS","staticCache","successfulCaches","resource","response","fetchError","failedCaches","clientList","oldCaches","name","successfulCleanups","cacheName","deleted","notificationPromises","request","url","isAPIRequest","handleAPIRequest","isStaticResource","handleStaticResource","isAppShell","handleAppShell","handleRuntimeRequest","handlePredictionRequest","cache","cachedResponse","controller","timeoutId","networkResponse","cacheError","createOfflineFallbackResponse","requestClone","cacheKey","createPredictionCacheKey","responseWithMetadata","addCacheMetadata","localPrediction","tryLocalPrediction","cachedPrediction","findSimilarCachedPrediction","createOfflinePredictionGuidance","body","localResult","calculateLocalLVO","gfap","fastEd","gfapScore","fastEdScore","lvoProb","ichProb","endpoint","hash","hashHex","b","syncMedicalData","showMedicalNotification","getCacheStatus","clearAllCaches","prefetchResources","caches","status","keys","cacheNames"],"mappings":"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"}