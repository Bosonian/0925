async function r(e,t=null,a={}){try{return await e()}catch(n){console.error("Service Worker error:",n.message,a);try{(await self.clients.matchAll()).forEach(i=>{i.postMessage({type:"SW_ERROR",error:{message:n.message,context:a,timestamp:new Date().toISOString()}})})}catch(s){console.error("Failed to send error message to clients:",s)}return typeof t=="function"?t(n):t}}const u="medical-app-v3.0.0",f=`${u}-static`,m=`${u}-api`,h=`${u}-runtime`,d=["/0925/","/0925/index.html","/0925/src/main.js","/0925/src/app.js","/0925/src/config.js","/0925/src/state/store.js","/0925/src/logic/validate.js","/0925/src/logic/ich-volume-calculator.js","/0925/src/logic/lvo-local-model.js","/0925/src/ui/render.js","/0925/src/styles/app.css","/0925/manifest.json","/0925/icon-192.png","/0925/icon-512.png"],g=["https://europe-west3-igfap-452720.cloudfunctions.net/predict_coma_ich","https://europe-west3-igfap-452720.cloudfunctions.net/predict_limited_data_ich","https://europe-west3-igfap-452720.cloudfunctions.net/predict_full_stroke"];self.addEventListener("install",e=>{e.waitUntil(r(async()=>{const t=await caches.open(f),n=(await Promise.allSettled(d.map(async i=>{try{const c=await fetch(i);if(c.ok)return t.put(i,c);throw new Error(`Failed to fetch ${i}: ${c.status}`)}catch(c){return console.warn(`Failed to cache critical resource ${i}:`,c.message),null}}))).filter(i=>i.status==="fulfilled").length,s=d.length-n;if(s>d.length/2)throw new Error(`Too many critical resources failed to cache: ${s}/${d.length}`);await Promise.allSettled([caches.open(m),caches.open(h)]);try{(await self.clients.matchAll()).forEach(c=>{c.postMessage({type:"SW_INSTALLED",cacheVersion:u,criticalResourcesCount:d.length,successfulCaches:n,failedCaches:s,timestamp:new Date().toISOString()})})}catch(i){console.warn("Failed to send installation message:",i.message)}return self.skipWaiting(),{success:!0,successfulCaches:n,failedCaches:s}},t=>{console.error("Service Worker installation failed:",t.message);try{self.clients.matchAll().then(n=>{n.forEach(s=>{s.postMessage({type:"SW_INSTALL_ERROR",error:t.message,timestamp:new Date().toISOString()})})})}catch(a){console.error("Failed to send installation error message:",a.message)}return{success:!1,error:t.message}},{operation:"service_worker_installation",criticalResourcesCount:d.length}))});self.addEventListener("activate",e=>{e.waitUntil(r(async()=>{const a=(await caches.keys()).filter(o=>o.startsWith("medical-app-v")&&!o.includes(u)),s=(await Promise.allSettled(a.map(async o=>{try{const l=await caches.delete(o);return{cacheName:o,deleted:l}}catch(l){return console.warn(`Failed to delete cache ${o}:`,l.message),{cacheName:o,deleted:!1,error:l.message}}}))).filter(o=>o.status==="fulfilled"&&o.value.deleted).length;await Promise.race([self.clients.claim(),new Promise((o,l)=>setTimeout(()=>l(new Error("Client claim timeout")),5e3))]);const c=(await self.clients.matchAll()).map(o=>{try{return o.postMessage({type:"SW_ACTIVATED",cacheVersion:u,cleanedCaches:s,totalOldCaches:a.length,timestamp:new Date().toISOString()})}catch(l){return console.warn("Failed to notify client of activation:",l.message),null}});return await Promise.allSettled(c),{success:!0,cleanedCaches:s}},t=>(console.error("Service Worker activation failed:",t.message),r(async()=>{(await self.clients.matchAll()).forEach(n=>{n.postMessage({type:"SW_ACTIVATION_ERROR",error:t.message,timestamp:new Date().toISOString()})})},null,{operation:"activation_error_notification"}),{success:!1,error:t.message}),{operation:"service_worker_activation"}))});self.addEventListener("fetch",e=>{const{request:t}=e,a=new URL(t.url);if(t.method!=="GET"){w(a)&&e.respondWith(p(t));return}w(a)?e.respondWith(p(t)):R(a)?e.respondWith(E(t)):v(a)?e.respondWith(A(t)):e.respondWith(C(t))});async function p(e){return r(async()=>{const t=new URL(e.url);if(e.method==="POST")return await y(e);const a=await caches.open(m),n=await a.match(e);if(n)return r(async()=>{const c=await fetch(e);c.ok&&await a.put(e,c.clone())},null,{operation:"background_cache_update",url:e.url}),n;const s=new AbortController,i=setTimeout(()=>s.abort(),1e4);try{const c=await fetch(e,{signal:s.signal});if(clearTimeout(i),c.ok)try{await a.put(e,c.clone())}catch(o){console.warn("Failed to cache API response:",o.message)}return c}catch(c){throw clearTimeout(i),c}},t=>(console.warn("API request failed, returning offline fallback:",t.message),I()),{operation:"api_request_handling",url:e.url,method:e.method})}async function y(e){return r(async()=>{const t=e.clone(),a=new AbortController,n=setTimeout(()=>a.abort(),1e4);try{const s=await fetch(e,{signal:a.signal});if(clearTimeout(n),s.ok)return r(async()=>{const i=await caches.open(m),c=await b(t),o=await k(s.clone());await i.put(c,o)},null,{operation:"prediction_cache_storage",url:e.url}),s;throw new Error(`API returned ${s.status}: ${s.statusText}`)}catch(s){throw clearTimeout(n),s}},async t=>{console.warn("Network prediction failed, trying offline alternatives:",t.message);const a=await r(()=>S(e),null,{operation:"local_prediction_attempt"});if(a)return a;const n=await r(()=>T(e),null,{operation:"cached_prediction_lookup"});return n||O()},{operation:"prediction_request_handling",url:e.url})}async function S(e){return r(async()=>{let t;try{const a=await e.text();t=JSON.parse(a)}catch(a){throw new Error(`Failed to parse request body: ${a.message}`)}if(!t||typeof t!="object")throw new Error("Invalid request data format");if(e.url.includes("predict_full_stroke")){if(!t.gfap_value||!t.fast_ed_score)throw new Error("Missing required fields for local LVO prediction");if(t.gfap_value<0||t.gfap_value>1e4)throw new Error("GFAP value out of valid range");if(t.fast_ed_score<0||t.fast_ed_score>10)throw new Error("FAST-ED score out of valid range");const a=_(t.gfap_value,t.fast_ed_score);if(!a||typeof a!="object")throw new Error("Local LVO calculation failed");return new Response(JSON.stringify({...a,source:"local_model",offline:!0,timestamp:new Date().toISOString(),warning:"This is an offline prediction using a simplified model. Seek professional medical advice."}),{status:200,headers:{"Content-Type":"application/json"}})}return null},t=>(console.warn("Local prediction failed:",t.message),null),{operation:"local_prediction",url:e.url})}function _(e,t){try{if(typeof e!="number"||typeof t!="number")throw new Error("GFAP and FAST-ED values must be numbers");if(!isFinite(e)||!isFinite(t))throw new Error("GFAP and FAST-ED values must be finite numbers");if(e<0||t<0)throw new Error("GFAP and FAST-ED values cannot be negative");const a=e>500?.4:e>200?.2:.1,n=t>=4?.5:t>=2?.3:.1,s=Math.min(.95,a+n),i=Math.max(.05,Math.min(.5,e/2e3));if(!isFinite(s)||!isFinite(i)||s<0||s>1||i<0||i>1)throw new Error("Calculated probabilities are invalid");return{lvo:{probability:Math.round(s*100)/100,confidence:.6,module:"Local Offline Model",warning:"Simplified offline calculation - not for clinical decisions"},ich:{probability:Math.round(i*100)/100,confidence:.4,module:"Local Offline Model",warning:"Conservative estimate - seek immediate medical evaluation"},metadata:{calculatedAt:new Date().toISOString(),inputs:{gfap:e,fastEd:t},disclaimer:"This is a simplified offline model for emergency use only. Clinical judgment and professional medical evaluation are essential."}}}catch(a){return console.error("Local LVO calculation failed:",a.message),{lvo:{probability:.1,confidence:.1,module:"Emergency Fallback",error:"Calculation failed - using minimum risk estimate"},ich:{probability:.1,confidence:.1,module:"Emergency Fallback",error:"Calculation failed - using minimum risk estimate"},metadata:{calculatedAt:new Date().toISOString(),error:a.message,disclaimer:"Calculation failed. Immediate medical evaluation required."}}}}async function E(e){const t=await caches.open(f),a=await t.match(e);if(a)return a;try{const n=await fetch(e);return n.ok&&t.put(e,n.clone()),n}catch(n){return new Response("Service temporarily unavailable",{status:503,statusText:"Service Unavailable"})}}async function A(e){try{const t=await fetch(e);return t.ok&&(await caches.open(h)).put(e,t.clone()),t}catch(t){return await(await caches.open(f)).match("/0925/index.html")||new Response("App temporarily unavailable",{status:503,statusText:"Service Unavailable"})}}async function C(e){const t=await caches.open(h);try{const a=await fetch(e);return a.ok&&t.put(e,a.clone()),a}catch(a){return await t.match(e)||fetch(e)}}function w(e){return g.some(t=>e.href.startsWith(t))}function R(e){return e.pathname.includes("/src/")||e.pathname.includes("/styles/")||e.pathname.endsWith(".css")||e.pathname.endsWith(".js")||e.pathname.endsWith(".png")||e.pathname.endsWith(".ico")}function v(e){return e.pathname==="/0925/"||e.pathname==="/0925/index.html"||e.pathname.endsWith("/")}async function b(e){const t=await e.text(),a=await crypto.subtle.digest("SHA-256",new TextEncoder().encode(t)),s=Array.from(new Uint8Array(a)).map(i=>i.toString(16).padStart(2,"0")).join("");return`${e.url}#${s}`}async function k(e){const a={...await e.json(),_cached:!0,_cachedAt:Date.now(),_cacheVersion:u};return new Response(JSON.stringify(a),{status:e.status,statusText:e.statusText,headers:e.headers})}async function T(e){return null}function I(e){return new Response(JSON.stringify({error:"Network unavailable",offline:!0,guidance:"Please check your network connection. For emergency situations, contact your local emergency services immediately.",timestamp:new Date().toISOString()}),{status:503,headers:{"Content-Type":"application/json"}})}function O(){return new Response(JSON.stringify({offline:!0,guidance:{message:"Prediction services are currently unavailable. Please use clinical judgment and standard stroke protocols.",recommendations:["Assess patient using standard NIHSS scoring","Consider time since symptom onset","Evaluate for contraindications to thrombolysis","Contact stroke team or neurologist if available","If in doubt, treat as potential stroke emergency"]},emergency:"For immediate emergency response, contact your local emergency services",timestamp:new Date().toISOString()}),{status:200,headers:{"Content-Type":"application/json"}})}self.addEventListener("sync",e=>{e.tag==="medical-data-sync"&&e.waitUntil(P())});async function P(){try{(await self.clients.matchAll()).forEach(t=>{t.postMessage({type:"MEDICAL_DATA_SYNCED",timestamp:new Date().toISOString()})})}catch(e){}}self.addEventListener("push",e=>{if(e.data){const t=e.data.json();t.type==="medical-alert"&&e.waitUntil(F(t))}});async function F(e){const t={body:e.message,icon:"/0925/icon-192.png",badge:"/0925/icon-192.png",vibrate:[200,100,200],requireInteraction:!0,actions:[{action:"view",title:"View Details"},{action:"dismiss",title:"Dismiss"}]};await self.registration.showNotification(e.title,t)}self.addEventListener("notificationclick",e=>{e.notification.close(),e.action==="view"&&e.waitUntil(self.clients.openWindow("/0925/"))});self.addEventListener("message",e=>{const{type:t,data:a}=e.data;switch(t){case"SKIP_WAITING":self.skipWaiting();break;case"GET_CACHE_STATUS":e.ports[0].postMessage(L());break;case"CLEAR_CACHE":e.waitUntil(D());break;case"PREFETCH_RESOURCES":e.waitUntil(W(a.resources));break}});async function L(){const e=await self.caches.keys(),t={};for(const a of e){const s=await(await self.caches.open(a)).keys();t[a]=s.length}return{version:u,caches:t,timestamp:new Date().toISOString()}}async function D(){const e=await caches.keys();await Promise.all(e.map(t=>caches.delete(t)))}async function W(e){const t=await caches.open(h);for(const a of e)try{const n=await fetch(a);n.ok&&await t.put(a,n)}catch(n){}}
//# sourceMappingURL=medical-service-worker-DG4fFSL8.js.map
