{"version":3,"file":"validation-factory-3DpiTsZ4.js","sources":["../../src/patterns/validation-factory.js"],"sourcesContent":["/**\n * Factory Pattern for Medical Validation Rules\n * iGFAP Stroke Triage Assistant - Enterprise Architecture\n *\n * Creates validation rules based on medical field types and requirements\n */\n\nimport { GFAP_RANGES } from \"../config.js\";\n\n/**\n * Abstract base class for validation rules\n */\nclass ValidationRule {\n  constructor(name, required = false) {\n    this.name = name;\n    this.required = required;\n    this.validators = [];\n    this.medicalChecks = [];\n  }\n\n  addValidator(validator) {\n    this.validators.push(validator);\n    return this;\n  }\n\n  addMedicalCheck(check) {\n    this.medicalChecks.push(check);\n    return this;\n  }\n\n  validate(value, formData = null) {\n    const errors = [];\n\n    // Check required field\n    if (this.required && !value && value !== 0) {\n      errors.push(\"This field is required\");\n    }\n\n    // Run basic validators\n    for (const validator of this.validators) {\n      const error = validator(value);\n      if (error) {\n        errors.push(error);\n      }\n    }\n\n    // Run medical checks\n    for (const check of this.medicalChecks) {\n      const medicalError = check(value, formData);\n      if (medicalError) {\n        errors.push(medicalError);\n      }\n    }\n\n    return errors;\n  }\n\n  toConfig() {\n    return {\n      required: this.required,\n      validate: (value, formData) => this.validate(value, formData),\n    };\n  }\n}\n\n/**\n * Specific validation rule types\n */\nclass NumericValidationRule extends ValidationRule {\n  constructor(name, required = false, min = null, max = null) {\n    super(name, required);\n    this.min = min;\n    this.max = max;\n    this.type = \"number\";\n\n    if (min !== null) {\n      this.addValidator((value) => {\n        if (value !== \"\" && !isNaN(value) && parseFloat(value) < min) {\n          return `Value must be at least ${min}`;\n        }\n        return null;\n      });\n    }\n\n    if (max !== null) {\n      this.addValidator((value) => {\n        if (value !== \"\" && !isNaN(value) && parseFloat(value) > max) {\n          return `Value must be at most ${max}`;\n        }\n        return null;\n      });\n    }\n  }\n\n  toConfig() {\n    return {\n      ...super.toConfig(),\n      min: this.min,\n      max: this.max,\n      type: this.type,\n    };\n  }\n}\n\nclass BiomarkerValidationRule extends NumericValidationRule {\n  constructor(name, biomarkerType, ranges) {\n    super(name, true, ranges.min, ranges.max);\n    this.biomarkerType = biomarkerType;\n    this.ranges = ranges;\n\n    // Add biomarker-specific medical checks\n    this.addMedicalCheck((value) => {\n      const numValue = parseFloat(value);\n      if (isNaN(numValue)) {\n        return null;\n      }\n\n      if (biomarkerType === \"GFAP\" && numValue > ranges.critical) {\n        return \"Extremely high GFAP value - please verify lab result\";\n      }\n\n      return null;\n    });\n  }\n}\n\nclass VitalSignValidationRule extends NumericValidationRule {\n  constructor(name, vitalType, min, max) {\n    super(name, true, min, max);\n    this.vitalType = vitalType;\n\n    // Add vital sign medical checks\n    this.addMedicalCheck((value, formData) => {\n      const numValue = parseFloat(value);\n      if (isNaN(numValue)) {\n        return null;\n      }\n\n      switch (vitalType) {\n      case \"SYSTOLIC_BP\":\n        if (formData?.diastolic_bp) {\n          const diastolic = parseFloat(formData.diastolic_bp);\n          if (!isNaN(diastolic) && numValue <= diastolic) {\n            return \"Systolic BP must be higher than diastolic BP\";\n          }\n        }\n        break;\n      case \"DIASTOLIC_BP\":\n        if (formData?.systolic_bp) {\n          const systolic = parseFloat(formData.systolic_bp);\n          if (!isNaN(systolic) && numValue >= systolic) {\n            return \"Diastolic BP must be lower than systolic BP\";\n          }\n        }\n        break;\n      }\n\n      return null;\n    });\n  }\n}\n\nclass AgeValidationRule extends NumericValidationRule {\n  constructor(name) {\n    super(name, true, 0, 120);\n\n    this.addMedicalCheck((value) => {\n      const numValue = parseFloat(value);\n      if (isNaN(numValue)) {\n        return null;\n      }\n\n      if (numValue < 18) {\n        return \"Emergency stroke assessment typically for adults (â‰¥18 years)\";\n      }\n\n      return null;\n    });\n  }\n}\n\nclass ClinicalScaleValidationRule extends NumericValidationRule {\n  constructor(name, scaleType, min, max) {\n    super(name, true, min, max);\n    this.scaleType = scaleType;\n\n    this.addMedicalCheck((value) => {\n      const numValue = parseFloat(value);\n      if (isNaN(numValue)) {\n        return null;\n      }\n\n      switch (scaleType) {\n      case \"GCS\":\n        if (numValue < 8) {\n          return \"GCS < 8 indicates severe consciousness impairment - consider coma module\";\n        }\n        break;\n      case \"FAST_ED\":\n        if (numValue >= 4) {\n          return \"High FAST-ED score suggests LVO - consider urgent intervention\";\n        }\n        break;\n      }\n\n      return null;\n    });\n  }\n}\n\n/**\n * Factory for creating medical validation rules\n */\nexport class MedicalValidationFactory {\n  static createRule(type, name, options = {}) {\n    switch (type) {\n    case \"AGE\":\n      return new AgeValidationRule(name);\n\n    case \"BIOMARKER\":\n      if (options.biomarkerType === \"GFAP\") {\n        return new BiomarkerValidationRule(name, \"GFAP\", GFAP_RANGES);\n      }\n      throw new Error(`Unsupported biomarker type: ${options.biomarkerType}`);\n\n    case \"VITAL_SIGN\":\n      return new VitalSignValidationRule(\n        name,\n        options.vitalType,\n        options.min,\n        options.max,\n      );\n\n    case \"CLINICAL_SCALE\":\n      return new ClinicalScaleValidationRule(\n        name,\n        options.scaleType,\n        options.min,\n        options.max,\n      );\n\n    case \"NUMERIC\":\n      return new NumericValidationRule(\n        name,\n        options.required,\n        options.min,\n        options.max,\n      );\n\n    default:\n      throw new Error(`Unsupported validation rule type: ${type}`);\n    }\n  }\n\n  /**\n   * Create a complete validation rule set for a medical module\n   * @param {string} moduleType - Type of medical module\n   * @returns {Object} Complete validation rule configuration\n   */\n  static createModuleValidation(moduleType) {\n    const rules = {};\n\n    switch (moduleType) {\n    case \"LIMITED\":\n      rules.age_years = this.createRule(\"AGE\", \"age_years\").toConfig();\n      rules.systolic_bp = this.createRule(\"VITAL_SIGN\", \"systolic_bp\", {\n        vitalType: \"SYSTOLIC_BP\",\n        min: 60,\n        max: 300,\n      }).toConfig();\n      rules.diastolic_bp = this.createRule(\"VITAL_SIGN\", \"diastolic_bp\", {\n        vitalType: \"DIASTOLIC_BP\",\n        min: 30,\n        max: 200,\n      }).toConfig();\n      rules.gfap_value = this.createRule(\"BIOMARKER\", \"gfap_value\", {\n        biomarkerType: \"GFAP\",\n      }).toConfig();\n      break;\n\n    case \"FULL\":\n      // Include all limited module rules\n      Object.assign(rules, this.createModuleValidation(\"LIMITED\"));\n\n      // Add additional full module rules\n      rules.fast_ed_score = this.createRule(\"CLINICAL_SCALE\", \"fast_ed_score\", {\n        scaleType: \"FAST_ED\",\n        min: 0,\n        max: 9,\n      }).toConfig();\n      break;\n\n    case \"COMA\":\n      rules.gfap_value = this.createRule(\"BIOMARKER\", \"gfap_value\", {\n        biomarkerType: \"GFAP\",\n      }).toConfig();\n      rules.gcs = this.createRule(\"CLINICAL_SCALE\", \"gcs\", {\n        scaleType: \"GCS\",\n        min: 3,\n        max: 15,\n      }).toConfig();\n      break;\n\n    default:\n      throw new Error(`Unsupported module type: ${moduleType}`);\n    }\n\n    return rules;\n  }\n\n  /**\n   * Validate form data using factory-created rules\n   * @param {Object} formData - Form data to validate\n   * @param {string} moduleType - Type of medical module\n   * @returns {Object} Validation result\n   */\n  static validateModule(formData, moduleType) {\n    const rules = this.createModuleValidation(moduleType);\n    const validationErrors = {};\n    let isValid = true;\n\n    Object.entries(rules).forEach(([fieldName, rule]) => {\n      const value = formData[fieldName];\n      const errors = rule.validate(value, formData);\n\n      if (errors.length > 0) {\n        validationErrors[fieldName] = errors;\n        isValid = false;\n      }\n    });\n\n    return { isValid, validationErrors };\n  }\n}\n\n// Export validation rule types for external use\nexport const VALIDATION_RULE_TYPES = {\n  AGE: \"AGE\",\n  BIOMARKER: \"BIOMARKER\",\n  VITAL_SIGN: \"VITAL_SIGN\",\n  CLINICAL_SCALE: \"CLINICAL_SCALE\",\n  NUMERIC: \"NUMERIC\",\n};\n\nexport const BIOMARKER_TYPES = {\n  GFAP: \"GFAP\",\n};\n\nexport const VITAL_SIGN_TYPES = {\n  SYSTOLIC_BP: \"SYSTOLIC_BP\",\n  DIASTOLIC_BP: \"DIASTOLIC_BP\",\n};\n\nexport const CLINICAL_SCALE_TYPES = {\n  GCS: \"GCS\",\n  FAST_ED: \"FAST_ED\",\n};\n"],"names":["ValidationRule","name","required","validator","check","value","formData","errors","error","medicalError","NumericValidationRule","min","max","BiomarkerValidationRule","biomarkerType","ranges","numValue","VitalSignValidationRule","vitalType","diastolic","systolic","AgeValidationRule","ClinicalScaleValidationRule","scaleType","MedicalValidationFactory","type","options","GFAP_RANGES","moduleType","rules","validationErrors","isValid","fieldName","rule","VALIDATION_RULE_TYPES","BIOMARKER_TYPES","VITAL_SIGN_TYPES","CLINICAL_SCALE_TYPES"],"mappings":"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"}