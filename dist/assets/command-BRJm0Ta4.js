import{m as s,M as a}from"./index-bmQyHUpJ.js";class i{constructor(t,e,r={}){this.name=t,this.description=e,this.metadata={...r,id:`cmd_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,timestamp:new Date().toISOString()},this.executed=!1,this.undone=!1}async execute(){if(this.executed&&!this.undone)throw new Error(`Command ${this.name} has already been executed`);try{s.publish(a.AUDIT_EVENT,{action:"command_execute_start",command:this.name,commandId:this.metadata.id});const t=await this.doExecute();return this.executed=!0,this.undone=!1,s.publish(a.AUDIT_EVENT,{action:"command_execute_success",command:this.name,commandId:this.metadata.id}),t}catch(t){throw s.publish(a.AUDIT_EVENT,{action:"command_execute_error",command:this.name,commandId:this.metadata.id,error:t.message}),t}}async undo(){if(!this.executed||this.undone)throw new Error(`Command ${this.name} cannot be undone`);try{s.publish(a.AUDIT_EVENT,{action:"command_undo_start",command:this.name,commandId:this.metadata.id});const t=await this.doUndo();return this.undone=!0,s.publish(a.AUDIT_EVENT,{action:"command_undo_success",command:this.name,commandId:this.metadata.id}),t}catch(t){throw s.publish(a.AUDIT_EVENT,{action:"command_undo_error",command:this.name,commandId:this.metadata.id,error:t.message}),t}}async doExecute(){throw new Error("doExecute() must be implemented by concrete command")}async doUndo(){throw new Error("doUndo() must be implemented by concrete command")}canUndo(){return this.executed&&!this.undone}getSummary(){return{name:this.name,description:this.description,id:this.metadata.id,timestamp:this.metadata.timestamp,executed:this.executed,undone:this.undone}}}class m extends i{constructor(t,e,r,o){super("UPDATE_PATIENT_DATA",`Update ${t} from ${r} to ${e}`,{fieldName:t,newValue:e,previousValue:r}),this.fieldName=t,this.newValue=e,this.previousValue=r,this.store=o}async doExecute(){const t=this.store.getFormData("current")||{};return t[this.fieldName]=this.newValue,this.store.setFormData("current",t),s.publish(a.PATIENT_DATA_UPDATED,{field:this.fieldName,newValue:this.newValue,previousValue:this.previousValue}),{field:this.fieldName,value:this.newValue}}async doUndo(){const t=this.store.getFormData("current")||{};return this.previousValue===null||this.previousValue===void 0?delete t[this.fieldName]:t[this.fieldName]=this.previousValue,this.store.setFormData("current",t),s.publish(a.PATIENT_DATA_UPDATED,{field:this.fieldName,newValue:this.previousValue,previousValue:this.newValue,action:"undo"}),{field:this.fieldName,value:this.previousValue}}}class h extends i{constructor(t,e,r){super("NAVIGATE",`Navigate from ${e} to ${t}`,{targetScreen:t,sourceScreen:e}),this.targetScreen=t,this.sourceScreen=e,this.store=r}async doExecute(){return this.store.navigate(this.targetScreen),s.publish(a.NAVIGATION_CHANGED,{from:this.sourceScreen,to:this.targetScreen}),{from:this.sourceScreen,to:this.targetScreen}}async doUndo(){return this.store.navigate(this.sourceScreen),s.publish(a.NAVIGATION_CHANGED,{from:this.targetScreen,to:this.sourceScreen,action:"undo"}),{from:this.targetScreen,to:this.sourceScreen}}}class u extends i{constructor(t,e,r){super("SUBMIT_FORM",`Submit ${e} form for prediction`,{moduleType:e,formFields:Object.keys(t)}),this.formData={...t},this.moduleType=e,this.predictionStrategy=r,this.results=null}async doExecute(){return this.predictionStrategy.setStrategy(this.getStrategyName()),this.results=await this.predictionStrategy.predict(this.formData),s.publish(a.FORM_SUBMITTED,{moduleType:this.moduleType,fieldsCount:Object.keys(this.formData).length,success:!0}),this.results}async doUndo(){return this.results=null,s.publish(a.FORM_SUBMITTED,{moduleType:this.moduleType,action:"undo"}),null}getStrategyName(){switch(this.moduleType){case"coma":return"COMA_ICH";case"limited":return"LIMITED_DATA_ICH";case"full":return"FULL_STROKE";default:throw new Error(`Unknown module type: ${this.moduleType}`)}}}class l extends i{constructor(t,e){super("CLEAR_DATA",`Clear ${t} data for privacy compliance`,{dataType:t}),this.dataType=t,this.store=e,this.backupData=null}async doExecute(){switch(this.backupData=this.store.getState(),this.dataType){case"all":this.store.reset();break;case"forms":this.store.clearFormData();break;case"results":this.store.clearResults();break;default:throw new Error(`Unknown data type: ${this.dataType}`)}return s.publish(a.AUDIT_EVENT,{action:"data_cleared",dataType:this.dataType}),{dataType:this.dataType,cleared:!0}}async doUndo(){if(this.backupData)return this.store.setState(this.backupData),s.publish(a.AUDIT_EVENT,{action:"data_restored",dataType:this.dataType}),{dataType:this.dataType,restored:!0};throw new Error("Cannot undo data clear: backup not available")}}class d{constructor(){this.commandHistory=[],this.currentIndex=-1,this.maxHistorySize=100}async executeCommand(t){if(!(t instanceof i))throw new Error("Command must extend MedicalCommand");const e=await t.execute();return this.commandHistory=this.commandHistory.slice(0,this.currentIndex+1),this.commandHistory.push(t),this.currentIndex=this.commandHistory.length-1,this.commandHistory.length>this.maxHistorySize&&(this.commandHistory.shift(),this.currentIndex-=1),e}async undo(){if(this.currentIndex<0)throw new Error("No commands to undo");const t=this.commandHistory[this.currentIndex];if(!t.canUndo())throw new Error(`Command ${t.name} cannot be undone`);const e=await t.undo();return this.currentIndex-=1,e}async redo(){if(this.currentIndex>=this.commandHistory.length-1)throw new Error("No commands to redo");return this.currentIndex+=1,await this.commandHistory[this.currentIndex].execute()}canUndo(){return this.currentIndex>=0&&this.commandHistory[this.currentIndex]&&this.commandHistory[this.currentIndex].canUndo()}canRedo(){return this.currentIndex<this.commandHistory.length-1}getCommandHistory(){return this.commandHistory.map(t=>t.getSummary())}clearHistory(){this.commandHistory=[],this.currentIndex=-1}getStats(){return{totalCommands:this.commandHistory.length,currentIndex:this.currentIndex,canUndo:this.canUndo(),canRedo:this.canRedo(),executedCommands:this.currentIndex+1}}}const p=new d;export{l as ClearDataCommand,i as MedicalCommand,d as MedicalCommandInvoker,h as NavigationCommand,u as SubmitFormCommand,m as UpdatePatientDataCommand,p as medicalCommandInvoker};
