{"version":3,"file":"ui-components-BtD-M0jc.js","sources":["../../src/ui/components/stroke-center-map.js","../../src/ui/components/brain-visualization.js"],"sourcesContent":["// GPS-based stroke center map component\r\nimport {\r\n  COMPREHENSIVE_HOSPITAL_DATABASE,\r\n  ROUTING_ALGORITHM,\r\n} from '../../data/comprehensive-stroke-centers.js';\r\nimport {\r\n  calculateDistance,\r\n  calculateTravelTime,\r\n  calculateEmergencyTravelTime,\r\n} from '../../data/stroke-centers.js';\r\nimport { t } from '../../localization/i18n.js';\r\nimport { safeSetInnerHTML } from '../../security/html-sanitizer.js';\r\n\r\nexport function renderStrokeCenterMap(results) {\r\n  return `\r\n    <div class=\"bg-gray-800 text-white rounded-lg shadow-lg p-6 stroke-center-section\">\r\n      <h3 class=\"text-xl font-semibold mb-4 flex items-center gap-2\">\r\n        üè• ${t('nearestCentersTitle')}\r\n      </h3>\r\n\r\n      <div id=\"locationContainer\" class=\"space-y-4\">\r\n        \r\n        <!-- Location Controls -->\r\n        <div class=\"flex flex-wrap items-center gap-3\">\r\n          <button \r\n            type=\"button\" \r\n            id=\"useGpsButton\" \r\n            class=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-md text-white font-medium transition\"\r\n          >\r\n            üìç ${t('useCurrentLocation')}\r\n          </button>\r\n\r\n          <button \r\n            type=\"button\" \r\n            id=\"manualLocationButton\" \r\n            class=\"px-4 py-2 bg-gray-600 hover:bg-gray-700 rounded-md text-white font-medium transition\"\r\n          >\r\n            ‚úèÔ∏è ${t('enterManually')}\r\n          </button>\r\n        </div>\r\n\r\n        <!-- Manual Location Input -->\r\n        <div class=\"location-manual hidden flex gap-2\">\r\n          <input \r\n            type=\"text\" \r\n            id=\"locationInput\" \r\n            class=\"flex-1 px-3 py-2 rounded-md text-black focus:outline-none focus:ring-2 focus:ring-blue-500\" \r\n            placeholder=\"${t('enterLocationPlaceholder') || 'e.g. M√ºnchen, K√∂ln, Stuttgart, or 48.1351, 11.5820'}\"\r\n          />\r\n          <button \r\n            type=\"button\" \r\n            id=\"searchLocationButton\" \r\n            class=\"px-4 py-2 bg-green-600 hover:bg-green-700 rounded-md text-white font-medium transition\"\r\n          >\r\n            ${t('search')}\r\n          </button>\r\n        </div>\r\n\r\n        <!-- Results -->\r\n        <div \r\n          id=\"strokeCenterResults\" \r\n          class=\"stroke-center-results mt-4 space-y-3\"\r\n        ></div>\r\n      </div>\r\n    </div>\r\n  `;\r\n}\r\n\r\nexport function initializeStrokeCenterMap(results) {\r\n  console.log('[StrokeMap] Initializing stroke center map with results:', results);\r\n\r\n  const useGpsButton = document.getElementById('useGpsButton');\r\n  const manualLocationButton = document.getElementById('manualLocationButton');\r\n  const locationManual = document.querySelector('.location-manual');\r\n  const locationInput = document.getElementById('locationInput');\r\n  const searchLocationButton = document.getElementById('searchLocationButton');\r\n  const resultsContainer = document.getElementById('strokeCenterResults');\r\n\r\n  console.log('[StrokeMap] Found elements:', {\r\n    useGpsButton: !!useGpsButton,\r\n    manualLocationButton: !!manualLocationButton,\r\n    locationManual: !!locationManual,\r\n    locationInput: !!locationInput,\r\n    searchLocationButton: !!searchLocationButton,\r\n    resultsContainer: !!resultsContainer,\r\n  });\r\n\r\n  if (useGpsButton) {\r\n    useGpsButton.addEventListener('click', () => {\r\n      requestUserLocation(results, resultsContainer);\r\n    });\r\n  }\r\n\r\n  if (manualLocationButton) {\r\n    manualLocationButton.addEventListener('click', () => {\r\n      locationManual.style.display = locationManual.style.display === 'none' ? 'block' : 'none';\r\n    });\r\n  }\r\n\r\n  if (searchLocationButton) {\r\n    searchLocationButton.addEventListener('click', () => {\r\n      const location = locationInput.value.trim();\r\n      if (location) {\r\n        geocodeLocation(location, results, resultsContainer);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (locationInput) {\r\n    locationInput.addEventListener('keypress', e => {\r\n      if (e.key === 'Enter') {\r\n        const location = locationInput.value.trim();\r\n        if (location) {\r\n          geocodeLocation(location, results, resultsContainer);\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction requestUserLocation(results, resultsContainer) {\r\n  if (!navigator.geolocation) {\r\n    showLocationError(t('geolocationNotSupported'), resultsContainer);\r\n    return;\r\n  }\r\n\r\n  try {\r\n    safeSetInnerHTML(resultsContainer, `<div class=\"loading\">${t('gettingLocation')}...</div>`);\r\n  } catch (error) {\r\n    resultsContainer.textContent = 'Getting location...';\r\n    console.error('Sanitization failed:', error);\r\n  }\r\n\r\n  navigator.geolocation.getCurrentPosition(\r\n    position => {\r\n      const { latitude, longitude } = position.coords;\r\n      showNearestCenters(latitude, longitude, results, resultsContainer);\r\n    },\r\n    error => {\r\n      let errorMessage = t('locationError');\r\n      switch (error.code) {\r\n        case error.PERMISSION_DENIED:\r\n          errorMessage = t('locationPermissionDenied');\r\n          break;\r\n        case error.POSITION_UNAVAILABLE:\r\n          errorMessage = t('locationUnavailable');\r\n          break;\r\n        case error.TIMEOUT:\r\n          errorMessage = t('locationTimeout');\r\n          break;\r\n      }\r\n      showLocationError(errorMessage, resultsContainer);\r\n    },\r\n    {\r\n      enableHighAccuracy: true,\r\n      timeout: 10000,\r\n      maximumAge: 300000, // 5 minutes\r\n    }\r\n  );\r\n}\r\n\r\nasync function geocodeLocation(locationString, results, resultsContainer) {\r\n  try {\r\n    safeSetInnerHTML(resultsContainer, `<div class=\"loading\">${t('searchingLocation')}...</div>`);\r\n  } catch (error) {\r\n    resultsContainer.textContent = 'Searching location...';\r\n    console.error('Sanitization failed:', error);\r\n  }\r\n\r\n  // Check if user entered coordinates (format: lat, lng or lat,lng)\r\n  const coordPattern = /^(-?\\d+\\.?\\d*)\\s*,\\s*(-?\\d+\\.?\\d*)$/;\r\n  const coordMatch = locationString.trim().match(coordPattern);\r\n\r\n  if (coordMatch) {\r\n    // Direct coordinate input\r\n    const lat = parseFloat(coordMatch[1]);\r\n    const lng = parseFloat(coordMatch[2]);\r\n\r\n    // Validate coordinates are within supported German states (Bayern, BW, NRW)\r\n    if (lat >= 47.2 && lat <= 52.5 && lng >= 5.9 && lng <= 15.0) {\r\n      try {\r\n        safeSetInnerHTML(\r\n          resultsContainer,\r\n          `\r\n          <div class=\"location-success\">\r\n            <p>üìç Coordinates: ${lat.toFixed(4)}, ${lng.toFixed(4)}</p>\r\n          </div>\r\n        `\r\n        );\r\n      } catch (error) {\r\n        resultsContainer.textContent = `Coordinates: ${lat.toFixed(4)}, ${lng.toFixed(4)}`;\r\n        console.error('Sanitization failed:', error);\r\n      }\r\n      setTimeout(() => {\r\n        showNearestCenters(lat, lng, results, resultsContainer);\r\n      }, 500);\r\n      return;\r\n    }\r\n    showLocationError(\r\n      'Coordinates appear to be outside Germany. Please check the values.',\r\n      resultsContainer\r\n    );\r\n    return;\r\n  }\r\n\r\n  try {\r\n    // Clean up the location string\r\n    let searchLocation = locationString.trim();\r\n\r\n    // If it doesn't already include country info, add it\r\n    if (\r\n      !searchLocation.toLowerCase().includes('deutschland') &&\r\n      !searchLocation.toLowerCase().includes('germany') &&\r\n      !searchLocation.toLowerCase().includes('bayern') &&\r\n      !searchLocation.toLowerCase().includes('bavaria') &&\r\n      !searchLocation.toLowerCase().includes('nordrhein') &&\r\n      !searchLocation.toLowerCase().includes('baden')\r\n    ) {\r\n      searchLocation += ', Deutschland';\r\n    }\r\n\r\n    // Use Nominatim (OpenStreetMap) geocoding service - free and reliable\r\n    // Note: encodeURIComponent properly handles umlauts (√§, √∂, √º, √ü)\r\n    const encodedLocation = encodeURIComponent(searchLocation);\r\n    const url = `https://nominatim.openstreetmap.org/search?q=${encodedLocation}&countrycodes=de&format=json&limit=3&addressdetails=1`;\r\n\r\n    const response = await fetch(url, {\r\n      method: 'GET',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'User-Agent': 'iGFAP-StrokeTriage/2.1.0', // Required by Nominatim\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Geocoding API error: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n\r\n    if (data && data.length > 0) {\r\n      // Prefer results from supported states (Bayern, Baden-W√ºrttemberg, NRW)\r\n      let location = data[0];\r\n      const supportedStates = ['Bayern', 'Baden-W√ºrttemberg', 'Nordrhein-Westfalen'];\r\n\r\n      for (const result of data) {\r\n        if (result.address && supportedStates.includes(result.address.state)) {\r\n          location = result;\r\n          break;\r\n        }\r\n      }\r\n\r\n      const lat = parseFloat(location.lat);\r\n      const lng = parseFloat(location.lon);\r\n      const locationName = location.display_name || locationString;\r\n\r\n      // Show success message and then proceed with location\r\n      try {\r\n        safeSetInnerHTML(\r\n          resultsContainer,\r\n          `\r\n          <div class=\"location-success\">\r\n            <p>üìç Found: ${locationName}</p>\r\n            <small style=\"color: #666;\">Lat: ${lat.toFixed(4)}, Lng: ${lng.toFixed(4)}</small>\r\n          </div>\r\n        `\r\n        );\r\n      } catch (error) {\r\n        resultsContainer.textContent = `Found: ${locationName} (${lat.toFixed(4)}, ${lng.toFixed(4)})`;\r\n        console.error('Sanitization failed:', error);\r\n      }\r\n\r\n      // Wait a moment to show the found location, then show centers\r\n      setTimeout(() => {\r\n        showNearestCenters(lat, lng, results, resultsContainer);\r\n      }, 1000);\r\n    } else {\r\n      showLocationError(\r\n        `\r\n        <strong>Location \"${locationString}\" not found.</strong><br>\r\n        <small>Try:</small>\r\n        <ul style=\"text-align: left; font-size: 0.9em; margin: 10px 0;\">\r\n          <li>City name: \"M√ºnchen\", \"K√∂ln\", \"Stuttgart\"</li>\r\n          <li>Address: \"Marienplatz 1, M√ºnchen\"</li>\r\n          <li>Coordinates: \"48.1351, 11.5820\"</li>\r\n        </ul>\r\n      `,\r\n        resultsContainer\r\n      );\r\n    }\r\n  } catch (error) {\r\n    // ('Geocoding failed:', error);\r\n    showLocationError(\r\n      `\r\n      <strong>Unable to search location.</strong><br>\r\n      <small>Please try entering coordinates directly (e.g., \"48.1351, 11.5820\")</small>\r\n    `,\r\n      resultsContainer\r\n    );\r\n  }\r\n}\r\n\r\nasync function showNearestCenters(lat, lng, results, resultsContainer) {\r\n  const location = { lat, lng };\r\n\r\n  // Use the enhanced routing algorithm\r\n  const routing = ROUTING_ALGORITHM.routePatient({\r\n    location,\r\n    ichProbability: results?.ich?.probability || 0,\r\n    timeFromOnset: results?.timeFromOnset || null,\r\n    clinicalFactors: results?.clinicalFactors || {},\r\n  });\r\n\r\n  if (!routing || !routing.destination) {\r\n    try {\r\n      safeSetInnerHTML(\r\n        resultsContainer,\r\n        `\r\n        <div class=\"location-error\">\r\n          <p>‚ö†Ô∏è No suitable stroke centers found in this area.</p>\r\n          <p><small>Please try a different location or contact emergency services directly.</small></p>\r\n        </div>\r\n      `\r\n      );\r\n    } catch (error) {\r\n      resultsContainer.textContent =\r\n        'No suitable stroke centers found in this area. Please try a different location or contact emergency services directly.';\r\n      console.error('Sanitization failed:', error);\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Generate routing explanation\r\n  const routingExplanation = getEnhancedRoutingExplanation(routing, results);\r\n\r\n  // Show loading state\r\n  try {\r\n    safeSetInnerHTML(\r\n      resultsContainer,\r\n      `\r\n      <div class=\"location-info\">\r\n        <p><strong>${t('yourLocation')}:</strong> ${lat.toFixed(4)}, ${lng.toFixed(4)}</p>\r\n        <p><strong>Detected State:</strong> ${getStateName(routing.state)}</p>\r\n      </div>\r\n      <div class=\"loading\">${t('calculatingTravelTimes')}...</div>\r\n    `\r\n    );\r\n  } catch (error) {\r\n    resultsContainer.textContent = `Your Location: ${lat.toFixed(4)}, ${lng.toFixed(4)}. Calculating travel times...`;\r\n    console.error('Sanitization failed:', error);\r\n  }\r\n\r\n  try {\r\n    // Get all relevant hospitals for this routing decision\r\n    const database = COMPREHENSIVE_HOSPITAL_DATABASE[routing.state];\r\n    const allHospitals = [\r\n      ...database.neurosurgicalCenters,\r\n      ...database.comprehensiveStrokeCenters,\r\n      ...database.regionalStrokeUnits,\r\n      ...(database.thrombolysisHospitals || []),\r\n    ];\r\n\r\n    // Add distance and travel time to primary destination\r\n    const { destination } = routing;\r\n    destination.distance = calculateDistance(\r\n      lat,\r\n      lng,\r\n      destination.coordinates.lat,\r\n      destination.coordinates.lng\r\n    );\r\n\r\n    try {\r\n      const travelInfo = await calculateEmergencyTravelTime(\r\n        lat,\r\n        lng,\r\n        destination.coordinates.lat,\r\n        destination.coordinates.lng\r\n      );\r\n      destination.travelTime = travelInfo.duration;\r\n      destination.travelSource = travelInfo.source;\r\n    } catch (error) {\r\n      destination.travelTime = Math.round(destination.distance / 0.8); // Estimate\r\n      destination.travelSource = 'estimated';\r\n    }\r\n\r\n    // Find 3-4 alternative hospitals nearby\r\n    const alternatives = allHospitals\r\n      .filter(h => h.id !== destination.id)\r\n      .map(hospital => ({\r\n        ...hospital,\r\n        distance: calculateDistance(lat, lng, hospital.coordinates.lat, hospital.coordinates.lng),\r\n      }))\r\n      .sort((a, b) => a.distance - b.distance)\r\n      .slice(0, 3);\r\n\r\n    console.log('üè• Stroke Center Debug:', {\r\n      primaryDestination: destination.name,\r\n      alternativesCount: alternatives.length,\r\n      alternativeNames: alternatives.map(alt => alt.name),\r\n      allHospitalsCount: allHospitals.length,\r\n      routingState: routing.state,\r\n    });\r\n\r\n    // Add travel times to alternatives\r\n    for (const alt of alternatives) {\r\n      try {\r\n        const travelInfo = await calculateEmergencyTravelTime(\r\n          lat,\r\n          lng,\r\n          alt.coordinates.lat,\r\n          alt.coordinates.lng\r\n        );\r\n        alt.travelTime = travelInfo.duration;\r\n        alt.travelSource = travelInfo.source;\r\n      } catch (error) {\r\n        alt.travelTime = Math.round(alt.distance / 0.8);\r\n        alt.travelSource = 'estimated';\r\n      }\r\n    }\r\n\r\n    const html = `\r\n      <div class=\"location-info\">\r\n        <p><strong>${t('yourLocation')}:</strong> ${lat.toFixed(4)}, ${lng.toFixed(4)}</p>\r\n        <p><strong>State:</strong> ${getStateName(routing.state)}</p>\r\n        ${routingExplanation}\r\n      </div>\r\n      \r\n      <div class=\"recommended-centers\">\r\n        <h4>üè• ${routing.urgency === 'IMMEDIATE' ? 'Emergency' : 'Recommended'} Destination</h4>\r\n        ${renderEnhancedStrokeCenterCard(destination, true, routing)}\r\n      </div>\r\n      \r\n      ${\r\n        alternatives.length > 0\r\n          ? `\r\n        <div class=\"alternative-centers\">\r\n          <h4>Alternative Centers</h4>\r\n          ${alternatives.map(alt => renderEnhancedStrokeCenterCard(alt, false, routing)).join('')}\r\n        </div>\r\n      `\r\n          : ''\r\n      }\r\n      \r\n      <div class=\"travel-time-note\">\r\n        <small>${t('travelTimeNote') || 'Travel times estimated for emergency vehicles'}</small>\r\n      </div>\r\n    `;\r\n\r\n    try {\r\n      // Use safer DOM manipulation instead of innerHTML\r\n      resultsContainer.innerHTML = ''; // Clear first\r\n\r\n      // Create main container\r\n      const mainDiv = document.createElement('div');\r\n      mainDiv.className = 'stroke-center-enhanced';\r\n\r\n      // Add location info\r\n      const locationDiv = document.createElement('div');\r\n      locationDiv.className = 'location-info';\r\n      locationDiv.innerHTML = `\r\n        <p><strong>Your Location:</strong> ${lat.toFixed(4)}, ${lng.toFixed(4)}</p>\r\n        <p><strong>State:</strong> ${getStateName(routing.state)}</p>\r\n        ${routingExplanation}\r\n      `;\r\n      mainDiv.appendChild(locationDiv);\r\n\r\n      // Add primary destination\r\n      const primaryDiv = document.createElement('div');\r\n      primaryDiv.className = 'recommended-centers';\r\n      primaryDiv.innerHTML = `<h4>üè• ${routing.urgency === 'IMMEDIATE' ? 'Emergency' : 'Recommended'} Destination</h4>`;\r\n\r\n      const primaryCard = createStrokeCenterCard(destination, true, routing);\r\n      primaryDiv.appendChild(primaryCard);\r\n      mainDiv.appendChild(primaryDiv);\r\n\r\n      // Add alternatives if they exist\r\n      if (alternatives.length > 0) {\r\n        const altDiv = document.createElement('div');\r\n        altDiv.className = 'alternative-centers';\r\n        altDiv.innerHTML = '<h4>Alternative Centers</h4>';\r\n\r\n        alternatives.forEach(alt => {\r\n          const altCard = createStrokeCenterCard(alt, false, routing);\r\n          altDiv.appendChild(altCard);\r\n        });\r\n\r\n        mainDiv.appendChild(altDiv);\r\n      }\r\n\r\n      // Add travel time note\r\n      const noteDiv = document.createElement('div');\r\n      noteDiv.className = 'travel-time-note';\r\n      noteDiv.innerHTML = '<small>Travel times estimated for emergency vehicles</small>';\r\n      mainDiv.appendChild(noteDiv);\r\n\r\n      resultsContainer.appendChild(mainDiv);\r\n\r\n      // Add event listeners after DOM creation\r\n      addStrokeCenterEventListeners(resultsContainer);\r\n    } catch (error) {\r\n      console.error('üö® Stroke Center Display Error:', error);\r\n\r\n      // Fallback to simple display\r\n      resultsContainer.innerHTML = `\r\n        <div class=\"stroke-center-fallback\">\r\n          <h4>üè• Recommended Center</h4>\r\n          <p><strong>${routing?.destination?.name || 'Unknown Hospital'}</strong></p>\r\n          <p>üìç ${routing?.destination?.address || 'Address not available'}</p>\r\n          <p>üìû ${routing?.destination?.emergency || routing?.destination?.phone || 'Phone not available'}</p>\r\n          <p>üìè Distance: ${routing?.destination?.distance?.toFixed(1) || '?'} km</p>\r\n          ${alternatives?.length > 0 ? `<p><strong>+ ${alternatives.length} alternative centers nearby</strong></p>` : ''}\r\n        </div>\r\n      `;\r\n    }\r\n  } catch (error) {\r\n    // ('Enhanced routing failed, using basic display:', error);\r\n\r\n    // Fallback to basic display\r\n    try {\r\n      safeSetInnerHTML(\r\n        resultsContainer,\r\n        `\r\n        <div class=\"location-info\">\r\n          <p><strong>${t('yourLocation')}:</strong> ${lat.toFixed(4)}, ${lng.toFixed(4)}</p>\r\n          ${routingExplanation}\r\n        </div>\r\n\r\n        <div class=\"recommended-centers\">\r\n          <h4>Recommended Center</h4>\r\n          <div class=\"stroke-center-card recommended\">\r\n            <div class=\"center-header\">\r\n              <h5>${routing.destination.name}</h5>\r\n              <span class=\"distance\">${routing.destination.distance?.toFixed(1) || '?'} km</span>\r\n            </div>\r\n            <div class=\"center-details\">\r\n              <p class=\"address\">üìç ${routing.destination.address}</p>\r\n              <p class=\"phone\">üìû ${routing.destination.emergency || routing.destination.phone}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"routing-reasoning\">\r\n          <p><strong>Routing Logic:</strong> ${routing.reasoning}</p>\r\n        </div>\r\n      `\r\n      );\r\n    } catch (error) {\r\n      resultsContainer.textContent = `Your Location: ${lat.toFixed(4)}, ${lng.toFixed(4)}. Recommended Center: ${routing.destination.name} - ${routing.destination.distance?.toFixed(1) || '?'} km`;\r\n      console.error('Sanitization failed:', error);\r\n    }\r\n  }\r\n}\r\n\r\nfunction renderStrokeCenterList(centers, isRecommended = false) {\r\n  if (!centers || centers.length === 0) {\r\n    return `<p>${t('noCentersFound')}</p>`;\r\n  }\r\n\r\n  return centers\r\n    .map(\r\n      center => `\r\n    <div class=\"stroke-center-card ${isRecommended ? 'recommended' : 'alternative'}\">\r\n      <div class=\"center-header\">\r\n        <h5>${center.name}</h5>\r\n        <span class=\"center-type ${center.type}\">${t(`${center.type}Center`)}</span>\r\n        ${\r\n          center.travelTime\r\n            ? `\r\n          <span class=\"travel-time\">\r\n            <span class=\"time\">${center.travelTime} ${t('minutes')}</span>\r\n            <span class=\"distance\">(${center.distance} km)</span>\r\n          </span>\r\n        `\r\n            : `\r\n          <span class=\"distance\">${center.distance.toFixed(1)} km</span>\r\n        `\r\n        }\r\n      </div>\r\n      \r\n      <div class=\"center-details\">\r\n        <p class=\"address\">üìç ${center.address}</p>\r\n        <p class=\"phone\">üìû ${t('emergency')}: ${center.emergency}</p>\r\n        \r\n        <div class=\"services\">\r\n          ${center.services\r\n            .map(\r\n              service => `\r\n            <span class=\"service-badge\">${t(service)}</span>\r\n          `\r\n            )\r\n            .join('')}\r\n        </div>\r\n        \r\n        ${\r\n          center.certified\r\n            ? `\r\n          <div class=\"certification\">\r\n            ‚úÖ ${t('certified')}: ${center.certification}\r\n          </div>\r\n        `\r\n            : ''\r\n        }\r\n      </div>\r\n      \r\n      <div class=\"center-actions\">\r\n        <button class=\"call-button\" data-phone=\"${center.emergency}\">\r\n          üìû ${t('call')}\r\n        </button>\r\n        <button class=\"directions-button\" data-lat=\"${center.coordinates.lat}\" data-lng=\"${center.coordinates.lng}\">\r\n          üß≠ ${t('directions')}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  `\r\n    )\r\n    .join('');\r\n}\r\n\r\n// Helper functions for enhanced routing system\r\nfunction getStateName(stateCode) {\r\n  const stateNames = {\r\n    bayern: 'Bayern (Bavaria)',\r\n    badenWuerttemberg: 'Baden-W√ºrttemberg',\r\n    nordrheinWestfalen: 'Nordrhein-Westfalen (NRW)',\r\n  };\r\n  return stateNames[stateCode] || stateCode;\r\n}\r\n\r\nfunction getEnhancedRoutingExplanation(routing, results) {\r\n  const ichPercent = Math.round((results?.ich?.probability || 0) * 100);\r\n\r\n  let urgencyIcon = 'üè•';\r\n  if (routing.urgency === 'IMMEDIATE') {\r\n    urgencyIcon = 'üö®';\r\n  } else if (routing.urgency === 'TIME_CRITICAL') {\r\n    urgencyIcon = '‚è∞';\r\n  } else if (routing.urgency === 'URGENT') {\r\n    urgencyIcon = '‚ö†Ô∏è';\r\n  }\r\n\r\n  return `\r\n    <div class=\"routing-explanation ${routing.category.toLowerCase()}\">\r\n      <div class=\"routing-header\">\r\n        <strong>${urgencyIcon} ${routing.category.replace('_', ' ')} - ${routing.urgency}</strong>\r\n      </div>\r\n      <div class=\"routing-details\">\r\n        <p><strong>ICH Risk:</strong> ${ichPercent}% ${routing.threshold ? `(${routing.threshold})` : ''}</p>\r\n        ${routing.timeWindow ? `<p><strong>Time Window:</strong> ${routing.timeWindow}</p>` : ''}\r\n        <p><strong>Routing Logic:</strong> ${routing.reasoning}</p>\r\n        <p><strong>Pre-Alert:</strong> ${routing.preAlert}</p>\r\n        ${routing.bypassLocal ? '<p class=\"bypass-warning\">‚ö†Ô∏è Bypassing local hospitals</p>' : ''}\r\n      </div>\r\n    </div>\r\n  `;\r\n}\r\n\r\nfunction renderEnhancedStrokeCenterCard(center, isRecommended, routing) {\r\n  const capabilities = [];\r\n  if (center.neurosurgery) {\r\n    capabilities.push('üß† Neurosurgery');\r\n  }\r\n  if (center.thrombectomy) {\r\n    capabilities.push('ü©∏ Thrombectomy');\r\n  }\r\n  if (center.thrombolysis) {\r\n    capabilities.push('üíâ Thrombolysis');\r\n  }\r\n\r\n  const networkBadge = center.network ? `<span class=\"network-badge\">${center.network}</span>` : '';\r\n\r\n  return `\r\n    <div class=\"stroke-center-card ${isRecommended ? 'recommended' : 'alternative'} enhanced\">\r\n      <div class=\"center-header\">\r\n        <h5>${center.name}</h5>\r\n        <div class=\"center-badges\">\r\n          ${center.neurosurgery ? '<span class=\"capability-badge neurosurgery\">NS</span>' : ''}\r\n          ${center.thrombectomy ? '<span class=\"capability-badge thrombectomy\">TE</span>' : ''}\r\n          ${networkBadge}\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"center-metrics\">\r\n        ${\r\n          center.travelTime\r\n            ? `\r\n          <div class=\"travel-info\">\r\n            <span class=\"travel-time\">${center.travelTime} min</span>\r\n            <span class=\"distance\">${center.distance.toFixed(1)} km</span>\r\n          </div>\r\n        `\r\n            : `\r\n          <div class=\"distance-only\">\r\n            <span class=\"distance\">${center.distance.toFixed(1)} km</span>\r\n          </div>\r\n        `\r\n        }\r\n        <div class=\"bed-info\">\r\n          <span class=\"beds\">${center.beds} beds</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"center-details\">\r\n        <p class=\"address\">üìç ${center.address}</p>\r\n        <p class=\"phone\">üìû ${center.emergency || center.phone}</p>\r\n        \r\n        ${\r\n          capabilities.length > 0\r\n            ? `\r\n          <div class=\"capabilities\">\r\n            ${capabilities.join(' ‚Ä¢ ')}\r\n          </div>\r\n        `\r\n            : ''\r\n        }\r\n      </div>\r\n      \r\n      <div class=\"center-actions\">\r\n        <button class=\"call-button\" data-phone=\"${center.emergency || center.phone}\">\r\n          üìû Call\r\n        </button>\r\n        <button class=\"directions-button\" data-lat=\"${center.coordinates.lat}\" data-lng=\"${center.coordinates.lng}\">\r\n          üß≠ Directions\r\n        </button>\r\n      </div>\r\n    </div>\r\n  `;\r\n}\r\n\r\nfunction createStrokeCenterCard(center, isRecommended, routing) {\r\n  const card = document.createElement('div');\r\n  card.className = `stroke-center-card ${isRecommended ? 'recommended' : 'alternative'} enhanced`;\r\n\r\n  const capabilities = [];\r\n  if (center.neurosurgery) {\r\n    capabilities.push('üß† Neurosurgery');\r\n  }\r\n  if (center.thrombectomy) {\r\n    capabilities.push('ü©∏ Thrombectomy');\r\n  }\r\n  if (center.thrombolysis) {\r\n    capabilities.push('üíâ Thrombolysis');\r\n  }\r\n\r\n  const networkBadge = center.network ? `<span class=\"network-badge\">${center.network}</span>` : '';\r\n\r\n  card.innerHTML = `\r\n    <div class=\"center-header\">\r\n      <h5>${center.name}</h5>\r\n      <div class=\"center-badges\">\r\n        ${center.neurosurgery ? '<span class=\"capability-badge neurosurgery\">NS</span>' : ''}\r\n        ${center.thrombectomy ? '<span class=\"capability-badge thrombectomy\">TE</span>' : ''}\r\n        ${networkBadge}\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"center-metrics\">\r\n      ${\r\n        center.travelTime\r\n          ? `\r\n        <div class=\"travel-info\">\r\n          <span class=\"travel-time\">${center.travelTime} min</span>\r\n          <span class=\"distance\">${center.distance.toFixed(1)} km</span>\r\n        </div>\r\n      `\r\n          : `\r\n        <div class=\"distance-only\">\r\n          <span class=\"distance\">${center.distance.toFixed(1)} km</span>\r\n        </div>\r\n      `\r\n      }\r\n      <div class=\"bed-info\">\r\n        <span class=\"beds\">${center.beds} beds</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"center-details\">\r\n      <p class=\"address\">üìç ${center.address}</p>\r\n      <p class=\"phone\">üìû ${center.emergency || center.phone}</p>\r\n\r\n      ${\r\n        capabilities.length > 0\r\n          ? `\r\n        <div class=\"capabilities\">\r\n          ${capabilities.join(' ‚Ä¢ ')}\r\n        </div>\r\n      `\r\n          : ''\r\n      }\r\n    </div>\r\n\r\n    <div class=\"center-actions\">\r\n      <button class=\"call-button\" data-phone=\"${center.emergency || center.phone}\">\r\n        üìû Call\r\n      </button>\r\n      <button class=\"directions-button\" data-lat=\"${center.coordinates.lat}\" data-lng=\"${center.coordinates.lng}\">\r\n        üß≠ Directions\r\n      </button>\r\n    </div>\r\n  `;\r\n\r\n  return card;\r\n}\r\n\r\nfunction addStrokeCenterEventListeners(container) {\r\n  const callButtons = container.querySelectorAll('.call-button');\r\n  const directionsButtons = container.querySelectorAll('.directions-button');\r\n\r\n  callButtons.forEach(button => {\r\n    button.addEventListener('click', () => {\r\n      const { phone } = button.dataset;\r\n      if (phone) {\r\n        window.open(`tel:${phone}`);\r\n      }\r\n    });\r\n  });\r\n\r\n  directionsButtons.forEach(button => {\r\n    button.addEventListener('click', () => {\r\n      const { lat } = button.dataset;\r\n      const { lng } = button.dataset;\r\n      if (lat && lng) {\r\n        window.open(`https://maps.google.com/maps?daddr=${lat},${lng}`, '_blank');\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction showLocationError(message, container) {\r\n  try {\r\n    safeSetInnerHTML(\r\n      container,\r\n      `\r\n      <div class=\"location-error\">\r\n        <p>‚ö†Ô∏è ${message}</p>\r\n        <p><small>${t('tryManualEntry')}</small></p>\r\n      </div>\r\n    `\r\n    );\r\n  } catch (error) {\r\n    container.textContent = `Error: ${message}. ${t('tryManualEntry') || 'Try manual entry'}`;\r\n    console.error('Sanitization failed:', error);\r\n  }\r\n}\r\n","/**\r\n * Brain Visualization Component for ICH Volume Display\r\n * Creates an SVG-based brain hemorrhage visualization\r\n */\r\n\r\nimport {\r\n  calculateHemorrhageSizePercent, getVolumeColor, calculateICHVolume, formatVolumeDisplay,\r\n} from '../../logic/ich-volume-calculator.js';\r\n\r\n/**\r\n * Render brain visualization with hemorrhage overlay\r\n * @param {number} volume - ICH volume in ml\r\n * @param {string} size - 'compact' or 'detailed'\r\n * @returns {string} HTML string with SVG brain visualization\r\n */\r\nexport function renderBrainVisualization(volume, size = 'compact') {\r\n  const dimensions = size === 'compact' ? { width: 120, height: 120 } : { width: 200, height: 200 };\r\n  const centerX = dimensions.width / 2;\r\n  const centerY = dimensions.height / 2;\r\n\r\n  // Calculate hemorrhage appearance\r\n  const hemorrhagePercent = calculateHemorrhageSizePercent(volume);\r\n  const hemorrhageColor = getVolumeColor(volume);\r\n\r\n  // Scale hemorrhage radius based on volume (basal ganglia region, slightly off-center)\r\n  const maxRadius = dimensions.width * 0.25; // Maximum 25% of brain width\r\n  const hemorrhageRadius = (hemorrhagePercent / 70) * maxRadius; // 70% is max brain area\r\n\r\n  // Position hemorrhage in basal ganglia region (slightly right of center)\r\n  const hemorrhageX = centerX + (dimensions.width * 0.1); // 10% right of center\r\n  const hemorrhageY = centerY + (dimensions.height * 0.05); // 5% below center\r\n\r\n  // 30ml reference circle (for detailed view)\r\n  const referenceRadius = (40 / 70) * maxRadius; // 40% brain area = 30ml threshold\r\n\r\n  // Animation for hemorrhage (subtle pulsing)\r\n  const animationId = `hemorrhage-pulse-${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n  return `\r\n    <div class=\"brain-visualization ${size}\">\r\n      <svg \r\n        width=\"${dimensions.width}\" \r\n        height=\"${dimensions.height}\" \r\n        viewBox=\"0 0 ${dimensions.width} ${dimensions.height}\"\r\n        class=\"brain-svg\"\r\n        role=\"img\"\r\n        aria-label=\"Brain hemorrhage visualization showing ${volume.toFixed(1)}ml ICH volume\"\r\n      >\r\n        <!-- Brain outline with hemorrhage overlay -->\r\n        ${renderBrainOutlineWithHemorrhage(dimensions, volume)}\r\n        \r\n        <!-- 30ml reference indicator (detailed view only) -->\r\n        ${size === 'detailed' && volume > 0 ? `\r\n          <circle \r\n            cx=\"${hemorrhageX}\" \r\n            cy=\"${hemorrhageY}\" \r\n            r=\"${referenceRadius}\"\r\n            fill=\"none\" \r\n            stroke=\"#9ca3af\" \r\n            stroke-width=\"1\" \r\n            stroke-dasharray=\"3,3\"\r\n            opacity=\"0.5\"\r\n          />\r\n          <text \r\n            x=\"${hemorrhageX + referenceRadius + 5}\" \r\n            y=\"${hemorrhageY - referenceRadius}\" \r\n            font-size=\"10\" \r\n            fill=\"#6b7280\"\r\n            font-family=\"system-ui\"\r\n          >30ml</text>\r\n        ` : ''}\r\n        \r\n        <!-- Hemorrhage visualization -->\r\n        ${volume > 0 ? `\r\n          <circle \r\n            cx=\"${hemorrhageX}\" \r\n            cy=\"${hemorrhageY}\" \r\n            r=\"${hemorrhageRadius}\"\r\n            fill=\"${hemorrhageColor}\"\r\n            opacity=\"0.8\"\r\n            class=\"hemorrhage-circle\"\r\n          >\r\n            <!-- Subtle pulsing animation -->\r\n            <animate \r\n              attributeName=\"opacity\" \r\n              values=\"0.6;0.9;0.6\" \r\n              dur=\"2.5s\" \r\n              repeatCount=\"indefinite\"\r\n            />\r\n            ${hemorrhageRadius > 15 ? `\r\n            <animate \r\n              attributeName=\"r\" \r\n              values=\"${hemorrhageRadius * 0.95};${hemorrhageRadius};${hemorrhageRadius * 0.95}\" \r\n              dur=\"2.5s\" \r\n              repeatCount=\"indefinite\"\r\n            />\r\n            ` : ''}\r\n          </circle>\r\n          \r\n          <!-- Volume label (detailed view only) -->\r\n          ${size === 'detailed' ? `\r\n            <text \r\n              x=\"${centerX}\" \r\n              y=\"${dimensions.height - 10}\" \r\n              text-anchor=\"middle\" \r\n              font-size=\"12\" \r\n              font-weight=\"bold\"\r\n              fill=\"#374151\"\r\n              font-family=\"system-ui\"\r\n            >${volume < 1 ? '<1' : volume.toFixed(1)} ml</text>\r\n          ` : ''}\r\n        ` : ''}\r\n        \r\n        <style>\r\n          .hemorrhage-circle {\r\n            filter: drop-shadow(0 2px 4px rgba(0,0,0,0.2));\r\n          }\r\n        </style>\r\n      </svg>\r\n    </div>\r\n  `;\r\n}\r\n\r\n/**\r\n * Load and render the provided brain SVG with hemorrhage overlay\r\n * @param {object} dimensions - Width and height for the brain\r\n * @returns {string} Brain SVG with embedded hemorrhage visualization\r\n */\r\nfunction renderBrainOutlineWithHemorrhage(dimensions, volume) {\r\n  // For performance, we'll use the SVG as a background image and overlay the hemorrhage\r\n  // This avoids loading the 530KB SVG content directly into the DOM\r\n\r\n  const centerX = dimensions.width / 2;\r\n  const centerY = dimensions.height / 2;\r\n\r\n  // Calculate hemorrhage position (basal ganglia region - slightly right and posterior)\r\n  const hemorrhageX = centerX + (dimensions.width * 0.08); // 8% right of center\r\n  const hemorrhageY = centerY + (dimensions.height * 0.03); // 3% below center\r\n\r\n  const hemorrhagePercent = calculateHemorrhageSizePercent(volume);\r\n  const hemorrhageColor = getVolumeColor(volume);\r\n  const maxRadius = dimensions.width * 0.25;\r\n  const hemorrhageRadius = (hemorrhagePercent / 70) * maxRadius;\r\n\r\n  return `\r\n    <!-- 3D Brain image as background -->\r\n    <image \r\n      x=\"0\" \r\n      y=\"0\" \r\n      width=\"${dimensions.width}\" \r\n      height=\"${dimensions.height}\"\r\n      href=\"./src/assets/brain-3d.png\"\r\n      opacity=\"0.95\"\r\n      preserveAspectRatio=\"xMidYMid meet\"\r\n    />\r\n    \r\n    <!-- Hemorrhage overlay in basal ganglia region -->\r\n    ${volume > 0 ? `\r\n      <circle \r\n        cx=\"${hemorrhageX}\" \r\n        cy=\"${hemorrhageY}\" \r\n        r=\"${hemorrhageRadius}\"\r\n        fill=\"${hemorrhageColor}\"\r\n        opacity=\"0.85\"\r\n        class=\"hemorrhage-circle\"\r\n      >\r\n        <!-- Subtle pulsing animation -->\r\n        <animate \r\n          attributeName=\"opacity\" \r\n          values=\"0.7;0.95;0.7\" \r\n          dur=\"2.5s\" \r\n          repeatCount=\"indefinite\"\r\n        />\r\n        ${hemorrhageRadius > 8 ? `\r\n        <animate \r\n          attributeName=\"r\" \r\n          values=\"${hemorrhageRadius * 0.96};${hemorrhageRadius * 1.02};${hemorrhageRadius * 0.96}\" \r\n          dur=\"2.5s\" \r\n          repeatCount=\"indefinite\"\r\n        />\r\n        ` : ''}\r\n      </circle>\r\n      \r\n      <!-- Hemorrhage center highlight -->\r\n      <circle \r\n        cx=\"${hemorrhageX}\" \r\n        cy=\"${hemorrhageY}\" \r\n        r=\"${hemorrhageRadius * 0.3}\"\r\n        fill=\"${hemorrhageColor}\"\r\n        opacity=\"0.95\"\r\n        class=\"hemorrhage-center\"\r\n      />\r\n    ` : ''}\r\n  `;\r\n}\r\n\r\n/**\r\n * Temporary brain outline (for fallback when SVG file not available)\r\n */\r\nfunction renderTemporaryBrainOutline(dimensions) {\r\n  const centerX = dimensions.width / 2;\r\n  const centerY = dimensions.height / 2;\r\n\r\n  return `\r\n    <!-- Simplified brain outline -->\r\n    <ellipse \r\n      cx=\"${centerX}\" \r\n      cy=\"${centerY}\" \r\n      rx=\"${dimensions.width * 0.4}\" \r\n      ry=\"${dimensions.height * 0.35}\" \r\n      fill=\"#f1f5f9\" \r\n      stroke=\"#64748b\" \r\n      stroke-width=\"2\"\r\n      opacity=\"0.8\"\r\n    />\r\n    \r\n    <!-- Brain hemisphere division -->\r\n    <line \r\n      x1=\"${centerX}\" \r\n      y1=\"${centerY - dimensions.height * 0.25}\" \r\n      x2=\"${centerX}\" \r\n      y2=\"${centerY + dimensions.height * 0.25}\" \r\n      stroke=\"#9ca3af\" \r\n      stroke-width=\"1\" \r\n      opacity=\"0.5\"\r\n    />\r\n  `;\r\n}\r\n\r\n/**\r\n * Create compact brain icon for inline display\r\n * @param {number} volume - ICH volume in ml\r\n * @param {number} size - Icon size in pixels\r\n * @returns {string} Small brain icon with hemorrhage indicator\r\n */\r\nexport function renderCompactBrainIcon(volume, size = 24) {\r\n  const hemorrhageColor = getVolumeColor(volume);\r\n  const hemorrhageSize = volume > 0 ? Math.max(2, (volume / 50) * size * 0.3) : 0;\r\n\r\n  return `\r\n    <svg \r\n      width=\"${size}\" \r\n      height=\"${size}\" \r\n      viewBox=\"0 0 ${size} ${size}\"\r\n      class=\"brain-icon\"\r\n      style=\"display: inline-block; vertical-align: middle;\"\r\n    >\r\n      <!-- Simple brain outline -->\r\n      <ellipse \r\n        cx=\"${size / 2}\" \r\n        cy=\"${size / 2}\" \r\n        rx=\"${size * 0.4}\" \r\n        ry=\"${size * 0.35}\" \r\n        fill=\"#f1f5f9\" \r\n        stroke=\"#64748b\" \r\n        stroke-width=\"1\"\r\n      />\r\n      \r\n      <!-- Hemorrhage indicator -->\r\n      ${volume > 0 ? `\r\n        <circle \r\n          cx=\"${size / 2 + size * 0.1}\" \r\n          cy=\"${size / 2}\" \r\n          r=\"${hemorrhageSize}\"\r\n          fill=\"${hemorrhageColor}\"\r\n          opacity=\"0.9\"\r\n        />\r\n      ` : ''}\r\n    </svg>\r\n  `;\r\n}\r\n\r\n/**\r\n * Render circular brain display matching ICH risk circle style\r\n * @param {number} volume - ICH volume in ml\r\n * @returns {string} HTML for circular brain display\r\n */\r\nexport function renderCircularBrainDisplay(volume) {\r\n  if (!volume || volume <= 0) {\r\n    return `\r\n      <div class=\"volume-circle\" data-volume=\"0\">\r\n        <div class=\"volume-number\">0<span> ml</span></div>\r\n        <canvas class=\"volume-canvas\" width=\"120\" height=\"120\"></canvas>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  const formattedVolume = formatVolumeDisplay(volume);\r\n  const canvasId = `volume-canvas-${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n  return `\r\n    <div class=\"volume-circle\" data-volume=\"${volume}\">\r\n      <div class=\"volume-number\">${formattedVolume}</div>\r\n      <canvas id=\"${canvasId}\" class=\"volume-canvas\" \r\n              data-volume=\"${volume}\" data-canvas-id=\"${canvasId}\"></canvas>\r\n    </div>\r\n  `;\r\n}\r\n\r\n/**\r\n * Initialize fluid fill animation for volume canvas\r\n * Call this after DOM is updated with new volume circles\r\n */\r\nexport function initializeVolumeAnimations() {\r\n  const canvases = document.querySelectorAll('.volume-canvas');\r\n\r\n  canvases.forEach((canvas) => {\r\n    // Set canvas internal size to match CSS size\r\n    const cssWidth = canvas.offsetWidth || 120;\r\n    const cssHeight = canvas.offsetHeight || 120;\r\n    canvas.width = cssWidth;\r\n    canvas.height = cssHeight;\r\n\r\n    const volume = parseFloat(canvas.dataset.volume) || 0;\r\n    if (volume > 0) {\r\n      drawVolumeFluid(canvas, volume);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Draw fluid fill animation on canvas\r\n * @param {HTMLCanvasElement} canvas - Canvas element\r\n * @param {number} volume - ICH volume in ml\r\n */\r\nfunction drawVolumeFluid(canvas, volume) {\r\n  const ctx = canvas.getContext('2d');\r\n  const centerX = canvas.width / 2;\r\n  const centerY = canvas.height / 2;\r\n  const radius = canvas.width * 0.45; // 45% of canvas width for the circle\r\n  let animationFrame = 0;\r\n  let isAnimating = true;\r\n\r\n  // Check dark mode once\r\n  const isDarkMode = document.body.classList.contains('dark-mode')\r\n                    || window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n\r\n  function draw() {\r\n    if (!isAnimating) {\r\n      return;\r\n    }\r\n\r\n    // Clear canvas completely\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Don't draw background - let CSS handle it\r\n    // Just draw the fluid and border\r\n    drawFluidLayer();\r\n  }\r\n\r\n  function drawFluidLayer() {\r\n    // Calculate fill level based on volume\r\n    const maxVolume = 80; // ml (practical maximum for visualization)\r\n    const fillPercentage = Math.min(volume / maxVolume, 0.9);\r\n    const fillHeight = fillPercentage * (radius * 1.8);\r\n    const baseLevel = centerY + radius - 4 - fillHeight;\r\n\r\n    // Draw fluid fill with waves\r\n    if (volume > 0) {\r\n      ctx.save();\r\n\r\n      // Clip to circle\r\n      ctx.beginPath();\r\n      ctx.arc(centerX, centerY, radius - 4, 0, Math.PI * 2);\r\n      ctx.clip();\r\n\r\n      // Draw base fluid rectangle\r\n      ctx.fillStyle = '#dc2626';\r\n      ctx.globalAlpha = 0.7;\r\n      ctx.fillRect(0, baseLevel + 5, canvas.width, canvas.height);\r\n\r\n      // Draw animated wave surface\r\n      ctx.globalAlpha = 0.9;\r\n      ctx.fillStyle = '#dc2626';\r\n      ctx.beginPath();\r\n\r\n      // Create wave path\r\n      const startX = centerX - radius + 4;\r\n      ctx.moveTo(startX, baseLevel);\r\n\r\n      for (let x = startX; x <= centerX + radius - 4; x += 2) {\r\n        const waveOffset1 = Math.sin((x * 0.05) + animationFrame * 0.08) * 3;\r\n        const waveOffset2 = Math.sin((x * 0.08) + animationFrame * 0.12 + 1) * 2;\r\n        const y = baseLevel + waveOffset1 + waveOffset2;\r\n        ctx.lineTo(x, y);\r\n      }\r\n\r\n      // Complete wave fill\r\n      ctx.lineTo(centerX + radius - 4, canvas.height);\r\n      ctx.lineTo(startX, canvas.height);\r\n      ctx.closePath();\r\n      ctx.fill();\r\n\r\n      ctx.restore();\r\n    }\r\n\r\n    // Draw background border circle (like ICH risk ring)\r\n    const borderColor = getComputedStyle(document.documentElement).getPropertyValue('--text-secondary').trim()\r\n                       || (isDarkMode ? '#8899a6' : '#6c757d');\r\n    ctx.strokeStyle = borderColor;\r\n    ctx.lineWidth = 8;\r\n    ctx.globalAlpha = 0.4;\r\n    ctx.beginPath();\r\n    ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\r\n    ctx.stroke();\r\n    ctx.globalAlpha = 1;\r\n\r\n    // Draw volume progress ring (like ICH risk circle)\r\n    const volumePercent = Math.min(volume / 100, 1); // Max 100ml = 100%\r\n    const circumference = 2 * Math.PI * radius;\r\n    const progressOffset = circumference * (1 - volumePercent);\r\n\r\n    // Progress ring (dark mode aware)\r\n    const progressColor = getComputedStyle(document.documentElement).getPropertyValue('--danger-color').trim()\r\n                         || '#dc2626';\r\n    ctx.strokeStyle = progressColor;\r\n    ctx.lineWidth = 8;\r\n    ctx.setLineDash([]);\r\n    ctx.lineCap = 'round';\r\n    ctx.beginPath();\r\n    ctx.arc(centerX, centerY, radius, -Math.PI / 2, -Math.PI / 2 + (volumePercent * 2 * Math.PI));\r\n    ctx.stroke();\r\n\r\n    // Continue animation\r\n    animationFrame += 1;\r\n    if (volume > 0) {\r\n      requestAnimationFrame(draw);\r\n    }\r\n  }\r\n\r\n  // Start animation\r\n  draw();\r\n\r\n  // Stop animation when canvas is removed from DOM\r\n  const observer = new MutationObserver(() => {\r\n    if (!document.contains(canvas)) {\r\n      isAnimating = false;\r\n      observer.disconnect();\r\n    }\r\n  });\r\n  observer.observe(document.body, { childList: true, subtree: true });\r\n}\r\n\r\n/**\r\n * Get brain visualization CSS classes\r\n * @param {string} size - 'compact' or 'detailed'\r\n * @returns {string} CSS classes\r\n */\r\nexport function getBrainVisualizationClasses(size) {\r\n  const baseClasses = 'brain-visualization';\r\n  const sizeClasses = size === 'compact' ? 'compact-brain' : 'detailed-brain';\r\n  return `${baseClasses} ${sizeClasses}`;\r\n}\r\n"],"names":["renderStrokeCenterMap","results","t","initializeStrokeCenterMap","useGpsButton","manualLocationButton","locationManual","locationInput","searchLocationButton","resultsContainer","requestUserLocation","location","geocodeLocation","e","showLocationError","safeSetInnerHTML","error","position","latitude","longitude","showNearestCenters","errorMessage","locationString","coordPattern","coordMatch","lat","lng","searchLocation","url","response","data","supportedStates","result","locationName","routing","ROUTING_ALGORITHM","_a","routingExplanation","getEnhancedRoutingExplanation","getStateName","database","COMPREHENSIVE_HOSPITAL_DATABASE","allHospitals","destination","calculateDistance","travelInfo","calculateEmergencyTravelTime","alternatives","h","hospital","a","b","alt","html","renderEnhancedStrokeCenterCard","mainDiv","locationDiv","primaryDiv","primaryCard","createStrokeCenterCard","altDiv","altCard","noteDiv","addStrokeCenterEventListeners","_b","_c","_d","_e","_g","_f","_h","_i","stateCode","ichPercent","urgencyIcon","center","isRecommended","capabilities","networkBadge","card","container","callButtons","directionsButtons","button","phone","message","renderCircularBrainDisplay","volume","formattedVolume","formatVolumeDisplay","canvasId","initializeVolumeAnimations","canvas","cssWidth","cssHeight","drawVolumeFluid","ctx","centerX","centerY","radius","animationFrame","isAnimating","isDarkMode","draw","drawFluidLayer","fillHeight","baseLevel","startX","x","waveOffset1","waveOffset2","y","borderColor","volumePercent","progressColor","observer"],"mappings":"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"}